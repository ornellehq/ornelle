/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateWorkspaceRequest,
  Def0,
  GetWorkspace200Response,
  GetWorkspaceAuthToken200Response,
  UpdateWorkspaceRequest,
} from '../models';
import {
    CreateWorkspaceRequestFromJSON,
    CreateWorkspaceRequestToJSON,
    Def0FromJSON,
    Def0ToJSON,
    GetWorkspace200ResponseFromJSON,
    GetWorkspace200ResponseToJSON,
    GetWorkspaceAuthToken200ResponseFromJSON,
    GetWorkspaceAuthToken200ResponseToJSON,
    UpdateWorkspaceRequestFromJSON,
    UpdateWorkspaceRequestToJSON,
} from '../models';

export interface CreateWorkspaceOperationRequest {
    createWorkspaceRequest: CreateWorkspaceRequest;
}

export interface GetWorkspaceAuthTokenRequest {
    url: string;
}

export interface UpdateWorkspaceOperationRequest {
    updateWorkspaceRequest?: UpdateWorkspaceRequest;
}

/**
 * WorkspaceApi - interface
 * 
 * @export
 * @interface WorkspaceApiInterface
 */
export interface WorkspaceApiInterface {
    /**
     * Creates a workspace for the current user
     * @param {CreateWorkspaceRequest} createWorkspaceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    createWorkspaceRaw(requestParameters: CreateWorkspaceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWorkspace200Response>>;

    /**
     * Creates a workspace for the current user
     */
    createWorkspace(requestParameters: CreateWorkspaceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWorkspace200Response>;

    /**
     * Returns the current workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    getWorkspaceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWorkspace200Response>>;

    /**
     * Returns the current workspace
     */
    getWorkspace(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWorkspace200Response>;

    /**
     * Authenticate a user for workspace access
     * @param {string} url 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    getWorkspaceAuthTokenRaw(requestParameters: GetWorkspaceAuthTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWorkspaceAuthToken200Response>>;

    /**
     * Authenticate a user for workspace access
     */
    getWorkspaceAuthToken(requestParameters: GetWorkspaceAuthTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWorkspaceAuthToken200Response>;

    /**
     * Fetches the current user\'s workspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    getWorkspacesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetWorkspace200Response>>>;

    /**
     * Fetches the current user\'s workspaces
     */
    getWorkspaces(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetWorkspace200Response>>;

    /**
     * Updates the current workspace
     * @param {UpdateWorkspaceRequest} [updateWorkspaceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    updateWorkspaceRaw(requestParameters: UpdateWorkspaceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWorkspace200Response>>;

    /**
     * Updates the current workspace
     */
    updateWorkspace(requestParameters: UpdateWorkspaceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWorkspace200Response>;

}

/**
 * 
 */
export class WorkspaceApi extends runtime.BaseAPI implements WorkspaceApiInterface {

    /**
     * Creates a workspace for the current user
     */
    async createWorkspaceRaw(requestParameters: CreateWorkspaceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWorkspace200Response>> {
        if (requestParameters.createWorkspaceRequest === null || requestParameters.createWorkspaceRequest === undefined) {
            throw new runtime.RequiredError('createWorkspaceRequest','Required parameter requestParameters.createWorkspaceRequest was null or undefined when calling createWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspaces/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateWorkspaceRequestToJSON(requestParameters.createWorkspaceRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWorkspace200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a workspace for the current user
     */
    async createWorkspace(requestParameters: CreateWorkspaceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWorkspace200Response> {
        const response = await this.createWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the current workspace
     */
    async getWorkspaceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWorkspace200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWorkspace200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the current workspace
     */
    async getWorkspace(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWorkspace200Response> {
        const response = await this.getWorkspaceRaw(initOverrides);
        return await response.value();
    }

    /**
     * Authenticate a user for workspace access
     */
    async getWorkspaceAuthTokenRaw(requestParameters: GetWorkspaceAuthTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWorkspaceAuthToken200Response>> {
        if (requestParameters.url === null || requestParameters.url === undefined) {
            throw new runtime.RequiredError('url','Required parameter requestParameters.url was null or undefined when calling getWorkspaceAuthToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{url}/token/`.replace(`{${"url"}}`, encodeURIComponent(String(requestParameters.url))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWorkspaceAuthToken200ResponseFromJSON(jsonValue));
    }

    /**
     * Authenticate a user for workspace access
     */
    async getWorkspaceAuthToken(requestParameters: GetWorkspaceAuthTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWorkspaceAuthToken200Response> {
        const response = await this.getWorkspaceAuthTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches the current user\'s workspaces
     */
    async getWorkspacesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetWorkspace200Response>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetWorkspace200ResponseFromJSON));
    }

    /**
     * Fetches the current user\'s workspaces
     */
    async getWorkspaces(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetWorkspace200Response>> {
        const response = await this.getWorkspacesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Updates the current workspace
     */
    async updateWorkspaceRaw(requestParameters: UpdateWorkspaceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWorkspace200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspace/`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateWorkspaceRequestToJSON(requestParameters.updateWorkspaceRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWorkspace200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates the current workspace
     */
    async updateWorkspace(requestParameters: UpdateWorkspaceOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWorkspace200Response> {
        const response = await this.updateWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
