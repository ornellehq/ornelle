/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetForms200ResponseInnerOpeningsInner,
  GetLandingData200Response,
  GetOpening200Response1,
} from '../models';
import {
    GetForms200ResponseInnerOpeningsInnerFromJSON,
    GetForms200ResponseInnerOpeningsInnerToJSON,
    GetLandingData200ResponseFromJSON,
    GetLandingData200ResponseToJSON,
    GetOpening200Response1FromJSON,
    GetOpening200Response1ToJSON,
} from '../models';

export interface CreateApplicationRequest {
    url: string;
}

export interface GetLandingDataRequest {
    url: string;
}

export interface GetOpeningRequest {
    id: string;
    url: string;
    email?: string;
}

export interface GetOpeningsRequest {
    url: string;
}

/**
 * ListingsApi - interface
 * 
 * @export
 * @interface ListingsApiInterface
 */
export interface ListingsApiInterface {
    /**
     * Create\'s an application
     * @param {string} url 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApiInterface
     */
    createApplicationRaw(requestParameters: CreateApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Create\'s an application
     */
    createApplication(requestParameters: CreateApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Returns data for the workspace\'s job board landing page
     * @param {string} url 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApiInterface
     */
    getLandingDataRaw(requestParameters: GetLandingDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLandingData200Response>>;

    /**
     * Returns data for the workspace\'s job board landing page
     */
    getLandingData(requestParameters: GetLandingDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLandingData200Response>;

    /**
     * Returns a specific opening by id
     * @param {string} id 
     * @param {string} url 
     * @param {string} [email] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApiInterface
     */
    getOpeningRaw(requestParameters: GetOpeningRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOpening200Response1>>;

    /**
     * Returns a specific opening by id
     */
    getOpening(requestParameters: GetOpeningRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOpening200Response1>;

    /**
     * Returns the current workspace\'s openings
     * @param {string} url 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApiInterface
     */
    getOpeningsRaw(requestParameters: GetOpeningsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetForms200ResponseInnerOpeningsInner>>>;

    /**
     * Returns the current workspace\'s openings
     */
    getOpenings(requestParameters: GetOpeningsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetForms200ResponseInnerOpeningsInner>>;

}

/**
 * 
 */
export class ListingsApi extends runtime.BaseAPI implements ListingsApiInterface {

    /**
     * Create\'s an application
     */
    async createApplicationRaw(requestParameters: CreateApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.url === null || requestParameters.url === undefined) {
            throw new runtime.RequiredError('url','Required parameter requestParameters.url was null or undefined when calling createApplication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{url}/applications/`.replace(`{${"url"}}`, encodeURIComponent(String(requestParameters.url))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create\'s an application
     */
    async createApplication(requestParameters: CreateApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createApplicationRaw(requestParameters, initOverrides);
    }

    /**
     * Returns data for the workspace\'s job board landing page
     */
    async getLandingDataRaw(requestParameters: GetLandingDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLandingData200Response>> {
        if (requestParameters.url === null || requestParameters.url === undefined) {
            throw new runtime.RequiredError('url','Required parameter requestParameters.url was null or undefined when calling getLandingData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{url}/job-board/landing/`.replace(`{${"url"}}`, encodeURIComponent(String(requestParameters.url))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLandingData200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns data for the workspace\'s job board landing page
     */
    async getLandingData(requestParameters: GetLandingDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLandingData200Response> {
        const response = await this.getLandingDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a specific opening by id
     */
    async getOpeningRaw(requestParameters: GetOpeningRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOpening200Response1>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOpening.');
        }

        if (requestParameters.url === null || requestParameters.url === undefined) {
            throw new runtime.RequiredError('url','Required parameter requestParameters.url was null or undefined when calling getOpening.');
        }

        const queryParameters: any = {};

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{url}/openings/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"url"}}`, encodeURIComponent(String(requestParameters.url))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOpening200Response1FromJSON(jsonValue));
    }

    /**
     * Returns a specific opening by id
     */
    async getOpening(requestParameters: GetOpeningRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOpening200Response1> {
        const response = await this.getOpeningRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the current workspace\'s openings
     */
    async getOpeningsRaw(requestParameters: GetOpeningsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetForms200ResponseInnerOpeningsInner>>> {
        if (requestParameters.url === null || requestParameters.url === undefined) {
            throw new runtime.RequiredError('url','Required parameter requestParameters.url was null or undefined when calling getOpenings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspaces/{url}/openings/`.replace(`{${"url"}}`, encodeURIComponent(String(requestParameters.url))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetForms200ResponseInnerOpeningsInnerFromJSON));
    }

    /**
     * Returns the current workspace\'s openings
     */
    async getOpenings(requestParameters: GetOpeningsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetForms200ResponseInnerOpeningsInner>> {
        const response = await this.getOpeningsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
