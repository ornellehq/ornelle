/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.15.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  CreateMeetingNote201Response,
  CreateMeetingNoteRequest,
  DeleteMeetingNote200Response,
  GetMeetingNotes200Response,
  UpdateMeetingNoteRequest,
} from "../models"
import {
  CreateMeetingNote201ResponseFromJSON,
  CreateMeetingNote201ResponseToJSON,
  CreateMeetingNoteRequestFromJSON,
  CreateMeetingNoteRequestToJSON,
  DeleteMeetingNote200ResponseFromJSON,
  DeleteMeetingNote200ResponseToJSON,
  GetMeetingNotes200ResponseFromJSON,
  GetMeetingNotes200ResponseToJSON,
  UpdateMeetingNoteRequestFromJSON,
  UpdateMeetingNoteRequestToJSON,
} from "../models"
import * as runtime from "../runtime"

export interface CreateMeetingNoteOperationRequest {
  createMeetingNoteRequest: CreateMeetingNoteRequest
}

export interface DeleteMeetingNoteRequest {
  id: string
}

export interface GetMeetingNotesRequest {
  profileId?: string
  meetingId?: string
  applicationId?: string
}

export interface UpdateMeetingNoteOperationRequest {
  id: string
  updateMeetingNoteRequest: UpdateMeetingNoteRequest
}

/**
 * MeetingNoteApi - interface
 *
 * @export
 * @interface MeetingNoteApiInterface
 */
export interface MeetingNoteApiInterface {
  /**
   * Creates a new meeting note
   * @param {CreateMeetingNoteRequest} createMeetingNoteRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingNoteApiInterface
   */
  createMeetingNoteRaw(
    requestParameters: CreateMeetingNoteOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateMeetingNote201Response>>

  /**
   * Creates a new meeting note
   */
  createMeetingNote(
    requestParameters: CreateMeetingNoteOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateMeetingNote201Response>

  /**
   * Deletes an existing meeting note
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingNoteApiInterface
   */
  deleteMeetingNoteRaw(
    requestParameters: DeleteMeetingNoteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DeleteMeetingNote200Response>>

  /**
   * Deletes an existing meeting note
   */
  deleteMeetingNote(
    requestParameters: DeleteMeetingNoteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DeleteMeetingNote200Response>

  /**
   * Gets meeting notes with optional filters
   * @param {string} [profileId]
   * @param {string} [meetingId]
   * @param {string} [applicationId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingNoteApiInterface
   */
  getMeetingNotesRaw(
    requestParameters: GetMeetingNotesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetMeetingNotes200Response>>

  /**
   * Gets meeting notes with optional filters
   */
  getMeetingNotes(
    requestParameters: GetMeetingNotesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetMeetingNotes200Response>

  /**
   * Updates an existing meeting note
   * @param {string} id
   * @param {UpdateMeetingNoteRequest} updateMeetingNoteRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingNoteApiInterface
   */
  updateMeetingNoteRaw(
    requestParameters: UpdateMeetingNoteOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateMeetingNote201Response>>

  /**
   * Updates an existing meeting note
   */
  updateMeetingNote(
    requestParameters: UpdateMeetingNoteOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateMeetingNote201Response>
}

/**
 *
 */
export class MeetingNoteApi
  extends runtime.BaseAPI
  implements MeetingNoteApiInterface
{
  /**
   * Creates a new meeting note
   */
  async createMeetingNoteRaw(
    requestParameters: CreateMeetingNoteOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateMeetingNote201Response>> {
    if (
      requestParameters.createMeetingNoteRequest === null ||
      requestParameters.createMeetingNoteRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "createMeetingNoteRequest",
        "Required parameter requestParameters.createMeetingNoteRequest was null or undefined when calling createMeetingNote.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization") // permissions authentication
    }

    const response = await this.request(
      {
        path: `/workspace/meeting-notes/`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateMeetingNoteRequestToJSON(
          requestParameters.createMeetingNoteRequest,
        ),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateMeetingNote201ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Creates a new meeting note
   */
  async createMeetingNote(
    requestParameters: CreateMeetingNoteOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateMeetingNote201Response> {
    const response = await this.createMeetingNoteRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Deletes an existing meeting note
   */
  async deleteMeetingNoteRaw(
    requestParameters: DeleteMeetingNoteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DeleteMeetingNote200Response>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling deleteMeetingNote.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization") // permissions authentication
    }

    const response = await this.request(
      {
        path: `/workspace/meeting-notes/$id/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DeleteMeetingNote200ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Deletes an existing meeting note
   */
  async deleteMeetingNote(
    requestParameters: DeleteMeetingNoteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DeleteMeetingNote200Response> {
    const response = await this.deleteMeetingNoteRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Gets meeting notes with optional filters
   */
  async getMeetingNotesRaw(
    requestParameters: GetMeetingNotesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetMeetingNotes200Response>> {
    const queryParameters: any = {}

    if (requestParameters.profileId !== undefined) {
      queryParameters["profileId"] = requestParameters.profileId
    }

    if (requestParameters.meetingId !== undefined) {
      queryParameters["meetingId"] = requestParameters.meetingId
    }

    if (requestParameters.applicationId !== undefined) {
      queryParameters["applicationId"] = requestParameters.applicationId
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization") // permissions authentication
    }

    const response = await this.request(
      {
        path: `/workspace/meeting-notes/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetMeetingNotes200ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Gets meeting notes with optional filters
   */
  async getMeetingNotes(
    requestParameters: GetMeetingNotesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetMeetingNotes200Response> {
    const response = await this.getMeetingNotesRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Updates an existing meeting note
   */
  async updateMeetingNoteRaw(
    requestParameters: UpdateMeetingNoteOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateMeetingNote201Response>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling updateMeetingNote.",
      )
    }

    if (
      requestParameters.updateMeetingNoteRequest === null ||
      requestParameters.updateMeetingNoteRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "updateMeetingNoteRequest",
        "Required parameter requestParameters.updateMeetingNoteRequest was null or undefined when calling updateMeetingNote.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization") // permissions authentication
    }

    const response = await this.request(
      {
        path: `/workspace/meeting-notes/$id/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateMeetingNoteRequestToJSON(
          requestParameters.updateMeetingNoteRequest,
        ),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateMeetingNote201ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Updates an existing meeting note
   */
  async updateMeetingNote(
    requestParameters: UpdateMeetingNoteOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateMeetingNote201Response> {
    const response = await this.updateMeetingNoteRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }
}
