/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateAttributeRequest,
  DeleteSelectOptionRequest,
  GetAttributes200ResponseInner,
  UpdateAttributeRequest,
} from '../models';
import {
    CreateAttributeRequestFromJSON,
    CreateAttributeRequestToJSON,
    DeleteSelectOptionRequestFromJSON,
    DeleteSelectOptionRequestToJSON,
    GetAttributes200ResponseInnerFromJSON,
    GetAttributes200ResponseInnerToJSON,
    UpdateAttributeRequestFromJSON,
    UpdateAttributeRequestToJSON,
} from '../models';

export interface CreateAttributeOperationRequest {
    createAttributeRequest: CreateAttributeRequest;
}

export interface DeleteAttributeRequest {
    id: string;
}

export interface DeleteSelectOptionOperationRequest {
    id: string;
    deleteSelectOptionRequest: DeleteSelectOptionRequest;
}

export interface GetAttributesRequest {
    entityTypes: Array<GetAttributesEntityTypesEnum>;
}

export interface UpdateAttributeOperationRequest {
    id: string;
    updateAttributeRequest?: UpdateAttributeRequest;
}

/**
 * AttributeApi - interface
 * 
 * @export
 * @interface AttributeApiInterface
 */
export interface AttributeApiInterface {
    /**
     * Creates an attribute in the current workspace
     * @param {CreateAttributeRequest} createAttributeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeApiInterface
     */
    createAttributeRaw(requestParameters: CreateAttributeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAttributes200ResponseInner>>;

    /**
     * Creates an attribute in the current workspace
     */
    createAttribute(requestParameters: CreateAttributeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAttributes200ResponseInner>;

    /**
     * Deletes an attribute in the current workspace
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeApiInterface
     */
    deleteAttributeRaw(requestParameters: DeleteAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAttributes200ResponseInner>>;

    /**
     * Deletes an attribute in the current workspace
     */
    deleteAttribute(requestParameters: DeleteAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAttributes200ResponseInner>;

    /**
     * Deletes a select option from its attribute configuration
     * @param {string} id 
     * @param {DeleteSelectOptionRequest} deleteSelectOptionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeApiInterface
     */
    deleteSelectOptionRaw(requestParameters: DeleteSelectOptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAttributes200ResponseInner>>;

    /**
     * Deletes a select option from its attribute configuration
     */
    deleteSelectOption(requestParameters: DeleteSelectOptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAttributes200ResponseInner>;

    /**
     * Gets attributes in the current workspace
     * @param {Array<'Role' | 'Opening' | 'Application' | 'Candidate' | 'Custom'>} entityTypes 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeApiInterface
     */
    getAttributesRaw(requestParameters: GetAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetAttributes200ResponseInner>>>;

    /**
     * Gets attributes in the current workspace
     */
    getAttributes(requestParameters: GetAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetAttributes200ResponseInner>>;

    /**
     * Updates an attribute in the current workspace
     * @param {string} id 
     * @param {UpdateAttributeRequest} [updateAttributeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeApiInterface
     */
    updateAttributeRaw(requestParameters: UpdateAttributeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAttributes200ResponseInner>>;

    /**
     * Updates an attribute in the current workspace
     */
    updateAttribute(requestParameters: UpdateAttributeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAttributes200ResponseInner>;

}

/**
 * 
 */
export class AttributeApi extends runtime.BaseAPI implements AttributeApiInterface {

    /**
     * Creates an attribute in the current workspace
     */
    async createAttributeRaw(requestParameters: CreateAttributeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAttributes200ResponseInner>> {
        if (requestParameters.createAttributeRequest === null || requestParameters.createAttributeRequest === undefined) {
            throw new runtime.RequiredError('createAttributeRequest','Required parameter requestParameters.createAttributeRequest was null or undefined when calling createAttribute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspace/attributes/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAttributeRequestToJSON(requestParameters.createAttributeRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAttributes200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Creates an attribute in the current workspace
     */
    async createAttribute(requestParameters: CreateAttributeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAttributes200ResponseInner> {
        const response = await this.createAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an attribute in the current workspace
     */
    async deleteAttributeRaw(requestParameters: DeleteAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAttributes200ResponseInner>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAttribute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/attributes/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAttributes200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Deletes an attribute in the current workspace
     */
    async deleteAttribute(requestParameters: DeleteAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAttributes200ResponseInner> {
        const response = await this.deleteAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a select option from its attribute configuration
     */
    async deleteSelectOptionRaw(requestParameters: DeleteSelectOptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAttributes200ResponseInner>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSelectOption.');
        }

        if (requestParameters.deleteSelectOptionRequest === null || requestParameters.deleteSelectOptionRequest === undefined) {
            throw new runtime.RequiredError('deleteSelectOptionRequest','Required parameter requestParameters.deleteSelectOptionRequest was null or undefined when calling deleteSelectOption.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspace/attributes/{id}/select-option/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteSelectOptionRequestToJSON(requestParameters.deleteSelectOptionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAttributes200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Deletes a select option from its attribute configuration
     */
    async deleteSelectOption(requestParameters: DeleteSelectOptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAttributes200ResponseInner> {
        const response = await this.deleteSelectOptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets attributes in the current workspace
     */
    async getAttributesRaw(requestParameters: GetAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetAttributes200ResponseInner>>> {
        if (requestParameters.entityTypes === null || requestParameters.entityTypes === undefined) {
            throw new runtime.RequiredError('entityTypes','Required parameter requestParameters.entityTypes was null or undefined when calling getAttributes.');
        }

        const queryParameters: any = {};

        if (requestParameters.entityTypes) {
            queryParameters['entityTypes'] = requestParameters.entityTypes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/attributes/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetAttributes200ResponseInnerFromJSON));
    }

    /**
     * Gets attributes in the current workspace
     */
    async getAttributes(requestParameters: GetAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetAttributes200ResponseInner>> {
        const response = await this.getAttributesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an attribute in the current workspace
     */
    async updateAttributeRaw(requestParameters: UpdateAttributeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAttributes200ResponseInner>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAttribute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspace/attributes/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAttributeRequestToJSON(requestParameters.updateAttributeRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAttributes200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Updates an attribute in the current workspace
     */
    async updateAttribute(requestParameters: UpdateAttributeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAttributes200ResponseInner> {
        const response = await this.updateAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum GetAttributesEntityTypesEnum {
    Role = 'Role',
    Opening = 'Opening',
    Application = 'Application',
    Candidate = 'Candidate',
    Custom = 'Custom'
}
