/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateOpeningRequest,
  Def0,
  GetApplicationsSortsParameterInner,
  GetForms200ResponseInnerOpeningsInner,
  GetOpening200Response,
  GetOpenings200ResponseInner,
  UpdateAnOpening200Response,
  UpdateAnOpeningRequest,
} from '../models';
import {
    CreateOpeningRequestFromJSON,
    CreateOpeningRequestToJSON,
    Def0FromJSON,
    Def0ToJSON,
    GetApplicationsSortsParameterInnerFromJSON,
    GetApplicationsSortsParameterInnerToJSON,
    GetForms200ResponseInnerOpeningsInnerFromJSON,
    GetForms200ResponseInnerOpeningsInnerToJSON,
    GetOpening200ResponseFromJSON,
    GetOpening200ResponseToJSON,
    GetOpenings200ResponseInnerFromJSON,
    GetOpenings200ResponseInnerToJSON,
    UpdateAnOpening200ResponseFromJSON,
    UpdateAnOpening200ResponseToJSON,
    UpdateAnOpeningRequestFromJSON,
    UpdateAnOpeningRequestToJSON,
} from '../models';

export interface CreateOpeningOperationRequest {
    createOpeningRequest: CreateOpeningRequest;
}

export interface DeleteOpeningRequest {
    id: string;
}

export interface GetOpeningRequest {
    id: string;
}

export interface GetOpeningsRequest {
    filters?: Array<object>;
    sorts?: Array<GetApplicationsSortsParameterInner>;
    include?: any;
}

export interface UpdateAnOpeningOperationRequest {
    id: string;
    updateAnOpeningRequest?: UpdateAnOpeningRequest;
}

/**
 * OpeningApi - interface
 * 
 * @export
 * @interface OpeningApiInterface
 */
export interface OpeningApiInterface {
    /**
     * Creates an opening in the current workspace
     * @param {CreateOpeningRequest} createOpeningRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpeningApiInterface
     */
    createOpeningRaw(requestParameters: CreateOpeningOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetForms200ResponseInnerOpeningsInner>>;

    /**
     * Creates an opening in the current workspace
     */
    createOpening(requestParameters: CreateOpeningOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetForms200ResponseInnerOpeningsInner>;

    /**
     * Deletes an opening by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpeningApiInterface
     */
    deleteOpeningRaw(requestParameters: DeleteOpeningRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes an opening by ID
     */
    deleteOpening(requestParameters: DeleteOpeningRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Return an opening by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpeningApiInterface
     */
    getOpeningRaw(requestParameters: GetOpeningRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOpening200Response>>;

    /**
     * Return an opening by ID
     */
    getOpening(requestParameters: GetOpeningRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOpening200Response>;

    /**
     * Returns the current workspace\'s openings
     * @param {Array<object>} [filters] 
     * @param {Array<GetApplicationsSortsParameterInner>} [sorts] 
     * @param {any} [include] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpeningApiInterface
     */
    getOpeningsRaw(requestParameters: GetOpeningsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetOpenings200ResponseInner>>>;

    /**
     * Returns the current workspace\'s openings
     */
    getOpenings(requestParameters: GetOpeningsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetOpenings200ResponseInner>>;

    /**
     * Update an opening by ID
     * @param {string} id 
     * @param {UpdateAnOpeningRequest} [updateAnOpeningRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpeningApiInterface
     */
    updateAnOpeningRaw(requestParameters: UpdateAnOpeningOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateAnOpening200Response>>;

    /**
     * Update an opening by ID
     */
    updateAnOpening(requestParameters: UpdateAnOpeningOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateAnOpening200Response>;

}

/**
 * 
 */
export class OpeningApi extends runtime.BaseAPI implements OpeningApiInterface {

    /**
     * Creates an opening in the current workspace
     */
    async createOpeningRaw(requestParameters: CreateOpeningOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetForms200ResponseInnerOpeningsInner>> {
        if (requestParameters.createOpeningRequest === null || requestParameters.createOpeningRequest === undefined) {
            throw new runtime.RequiredError('createOpeningRequest','Required parameter requestParameters.createOpeningRequest was null or undefined when calling createOpening.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspace/openings/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOpeningRequestToJSON(requestParameters.createOpeningRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetForms200ResponseInnerOpeningsInnerFromJSON(jsonValue));
    }

    /**
     * Creates an opening in the current workspace
     */
    async createOpening(requestParameters: CreateOpeningOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetForms200ResponseInnerOpeningsInner> {
        const response = await this.createOpeningRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an opening by ID
     */
    async deleteOpeningRaw(requestParameters: DeleteOpeningRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOpening.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/openings/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an opening by ID
     */
    async deleteOpening(requestParameters: DeleteOpeningRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOpeningRaw(requestParameters, initOverrides);
    }

    /**
     * Return an opening by ID
     */
    async getOpeningRaw(requestParameters: GetOpeningRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOpening200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOpening.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/openings/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOpening200ResponseFromJSON(jsonValue));
    }

    /**
     * Return an opening by ID
     */
    async getOpening(requestParameters: GetOpeningRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOpening200Response> {
        const response = await this.getOpeningRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the current workspace\'s openings
     */
    async getOpeningsRaw(requestParameters: GetOpeningsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetOpenings200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters.filters) {
            queryParameters['filters'] = requestParameters.filters;
        }

        if (requestParameters.sorts) {
            queryParameters['sorts'] = requestParameters.sorts;
        }

        if (requestParameters.include !== undefined) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/openings/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetOpenings200ResponseInnerFromJSON));
    }

    /**
     * Returns the current workspace\'s openings
     */
    async getOpenings(requestParameters: GetOpeningsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetOpenings200ResponseInner>> {
        const response = await this.getOpeningsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an opening by ID
     */
    async updateAnOpeningRaw(requestParameters: UpdateAnOpeningOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateAnOpening200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAnOpening.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspace/openings/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAnOpeningRequestToJSON(requestParameters.updateAnOpeningRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateAnOpening200ResponseFromJSON(jsonValue));
    }

    /**
     * Update an opening by ID
     */
    async updateAnOpening(requestParameters: UpdateAnOpeningOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateAnOpening200Response> {
        const response = await this.updateAnOpeningRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
