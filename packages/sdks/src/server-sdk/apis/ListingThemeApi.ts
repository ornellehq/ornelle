/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetListingThemes200ResponseInner,
  UpsertListingThemeRequest,
} from '../models';
import {
    GetListingThemes200ResponseInnerFromJSON,
    GetListingThemes200ResponseInnerToJSON,
    UpsertListingThemeRequestFromJSON,
    UpsertListingThemeRequestToJSON,
} from '../models';

export interface GetListingThemeRequest {
    id: string;
}

export interface UpsertListingThemeOperationRequest {
    id: string;
    upsertListingThemeRequest: UpsertListingThemeRequest;
}

/**
 * ListingThemeApi - interface
 * 
 * @export
 * @interface ListingThemeApiInterface
 */
export interface ListingThemeApiInterface {
    /**
     * Returns a listing theme by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingThemeApiInterface
     */
    getListingThemeRaw(requestParameters: GetListingThemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetListingThemes200ResponseInner>>;

    /**
     * Returns a listing theme by ID
     */
    getListingTheme(requestParameters: GetListingThemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetListingThemes200ResponseInner>;

    /**
     * Returns the current workspace\'s job board themes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingThemeApiInterface
     */
    getListingThemesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetListingThemes200ResponseInner>>>;

    /**
     * Returns the current workspace\'s job board themes
     */
    getListingThemes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetListingThemes200ResponseInner>>;

    /**
     * Creates or updates a listing theme in the current workspace
     * @param {string} id 
     * @param {UpsertListingThemeRequest} upsertListingThemeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingThemeApiInterface
     */
    upsertListingThemeRaw(requestParameters: UpsertListingThemeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetListingThemes200ResponseInner>>;

    /**
     * Creates or updates a listing theme in the current workspace
     */
    upsertListingTheme(requestParameters: UpsertListingThemeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetListingThemes200ResponseInner>;

}

/**
 * 
 */
export class ListingThemeApi extends runtime.BaseAPI implements ListingThemeApiInterface {

    /**
     * Returns a listing theme by ID
     */
    async getListingThemeRaw(requestParameters: GetListingThemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetListingThemes200ResponseInner>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getListingTheme.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/listing-themes/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetListingThemes200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Returns a listing theme by ID
     */
    async getListingTheme(requestParameters: GetListingThemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetListingThemes200ResponseInner> {
        const response = await this.getListingThemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the current workspace\'s job board themes
     */
    async getListingThemesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetListingThemes200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/listing-themes/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetListingThemes200ResponseInnerFromJSON));
    }

    /**
     * Returns the current workspace\'s job board themes
     */
    async getListingThemes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetListingThemes200ResponseInner>> {
        const response = await this.getListingThemesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Creates or updates a listing theme in the current workspace
     */
    async upsertListingThemeRaw(requestParameters: UpsertListingThemeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetListingThemes200ResponseInner>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling upsertListingTheme.');
        }

        if (requestParameters.upsertListingThemeRequest === null || requestParameters.upsertListingThemeRequest === undefined) {
            throw new runtime.RequiredError('upsertListingThemeRequest','Required parameter requestParameters.upsertListingThemeRequest was null or undefined when calling upsertListingTheme.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspace/listing-themes/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpsertListingThemeRequestToJSON(requestParameters.upsertListingThemeRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetListingThemes200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Creates or updates a listing theme in the current workspace
     */
    async upsertListingTheme(requestParameters: UpsertListingThemeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetListingThemes200ResponseInner> {
        const response = await this.upsertListingThemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
