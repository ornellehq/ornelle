/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateEmailAddress200Response,
  GetProfiles200ResponseInner,
  UpdateProfile200Response,
  UpdateProfileByIDRequest,
  UpdateProfileRequest,
} from '../models';
import {
    CreateEmailAddress200ResponseFromJSON,
    CreateEmailAddress200ResponseToJSON,
    GetProfiles200ResponseInnerFromJSON,
    GetProfiles200ResponseInnerToJSON,
    UpdateProfile200ResponseFromJSON,
    UpdateProfile200ResponseToJSON,
    UpdateProfileByIDRequestFromJSON,
    UpdateProfileByIDRequestToJSON,
    UpdateProfileRequestFromJSON,
    UpdateProfileRequestToJSON,
} from '../models';

export interface CreateEmailAddressRequest {
    body?: object;
}

export interface DeleteProfileByIDRequest {
    id: string;
}

export interface UpdateProfileOperationRequest {
    updateProfileRequest?: UpdateProfileRequest;
}

export interface UpdateProfileByIDOperationRequest {
    id: string;
    updateProfileByIDRequest?: UpdateProfileByIDRequest;
}

/**
 * ProfileApi - interface
 * 
 * @export
 * @interface ProfileApiInterface
 */
export interface ProfileApiInterface {
    /**
     * Creates an email address for the current user\'s profile
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApiInterface
     */
    createEmailAddressRaw(requestParameters: CreateEmailAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateEmailAddress200Response>>;

    /**
     * Creates an email address for the current user\'s profile
     */
    createEmailAddress(requestParameters: CreateEmailAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateEmailAddress200Response>;

    /**
     * Deletes a user profile by ID and associated email addresses
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApiInterface
     */
    deleteProfileByIDRaw(requestParameters: DeleteProfileByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateProfile200Response>>;

    /**
     * Deletes a user profile by ID and associated email addresses
     */
    deleteProfileByID(requestParameters: DeleteProfileByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateProfile200Response>;

    /**
     * Returns the current workspace\'s profiles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApiInterface
     */
    getProfilesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetProfiles200ResponseInner>>>;

    /**
     * Returns the current workspace\'s profiles
     */
    getProfiles(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetProfiles200ResponseInner>>;

    /**
     * Updates the current user\'s profile
     * @param {UpdateProfileRequest} [updateProfileRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApiInterface
     */
    updateProfileRaw(requestParameters: UpdateProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateProfile200Response>>;

    /**
     * Updates the current user\'s profile
     */
    updateProfile(requestParameters: UpdateProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateProfile200Response>;

    /**
     * Updates a user profile by ID
     * @param {string} id 
     * @param {UpdateProfileByIDRequest} [updateProfileByIDRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApiInterface
     */
    updateProfileByIDRaw(requestParameters: UpdateProfileByIDOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateProfile200Response>>;

    /**
     * Updates a user profile by ID
     */
    updateProfileByID(requestParameters: UpdateProfileByIDOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateProfile200Response>;

}

/**
 * 
 */
export class ProfileApi extends runtime.BaseAPI implements ProfileApiInterface {

    /**
     * Creates an email address for the current user\'s profile
     */
    async createEmailAddressRaw(requestParameters: CreateEmailAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateEmailAddress200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspace/profile/email-addresses/workspace/profile/email-addresses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateEmailAddress200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates an email address for the current user\'s profile
     */
    async createEmailAddress(requestParameters: CreateEmailAddressRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateEmailAddress200Response> {
        const response = await this.createEmailAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a user profile by ID and associated email addresses
     */
    async deleteProfileByIDRaw(requestParameters: DeleteProfileByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateProfile200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProfileByID.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/profiles/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateProfile200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a user profile by ID and associated email addresses
     */
    async deleteProfileByID(requestParameters: DeleteProfileByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateProfile200Response> {
        const response = await this.deleteProfileByIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the current workspace\'s profiles
     */
    async getProfilesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetProfiles200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/profiles/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetProfiles200ResponseInnerFromJSON));
    }

    /**
     * Returns the current workspace\'s profiles
     */
    async getProfiles(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetProfiles200ResponseInner>> {
        const response = await this.getProfilesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Updates the current user\'s profile
     */
    async updateProfileRaw(requestParameters: UpdateProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateProfile200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspace/profile/`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProfileRequestToJSON(requestParameters.updateProfileRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateProfile200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates the current user\'s profile
     */
    async updateProfile(requestParameters: UpdateProfileOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateProfile200Response> {
        const response = await this.updateProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a user profile by ID
     */
    async updateProfileByIDRaw(requestParameters: UpdateProfileByIDOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateProfile200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProfileByID.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspace/profiles/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProfileByIDRequestToJSON(requestParameters.updateProfileByIDRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateProfile200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates a user profile by ID
     */
    async updateProfileByID(requestParameters: UpdateProfileByIDOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateProfile200Response> {
        const response = await this.updateProfileByIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
