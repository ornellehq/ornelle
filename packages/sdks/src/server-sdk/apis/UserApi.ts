/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateAUserRequest,
  Def0,
  GetCurrentUser200Response,
  GetCurrentUser200ResponseData,
  GetCurrentUser404Response,
  LogOut200Response,
  RequestAuthentication200Response,
  VerifyAuthentication200Response,
} from '../models';
import {
    CreateAUserRequestFromJSON,
    CreateAUserRequestToJSON,
    Def0FromJSON,
    Def0ToJSON,
    GetCurrentUser200ResponseFromJSON,
    GetCurrentUser200ResponseToJSON,
    GetCurrentUser200ResponseDataFromJSON,
    GetCurrentUser200ResponseDataToJSON,
    GetCurrentUser404ResponseFromJSON,
    GetCurrentUser404ResponseToJSON,
    LogOut200ResponseFromJSON,
    LogOut200ResponseToJSON,
    RequestAuthentication200ResponseFromJSON,
    RequestAuthentication200ResponseToJSON,
    VerifyAuthentication200ResponseFromJSON,
    VerifyAuthentication200ResponseToJSON,
} from '../models';

export interface CreateAUserOperationRequest {
    createAUserRequest: CreateAUserRequest;
}

export interface RequestAuthenticationRequest {
    email: string;
}

export interface VerifyAuthenticationRequest {
    email: string;
    code: string;
}

/**
 * UserApi - interface
 * 
 * @export
 * @interface UserApiInterface
 */
export interface UserApiInterface {
    /**
     * Creates a new user
     * @param {CreateAUserRequest} createAUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    createAUserRaw(requestParameters: CreateAUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCurrentUser200ResponseData>>;

    /**
     * Creates a new user
     */
    createAUser(requestParameters: CreateAUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCurrentUser200ResponseData>;

    /**
     * Returns the currently authenticated user, if any
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    getCurrentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCurrentUser200Response>>;

    /**
     * Returns the currently authenticated user, if any
     */
    getCurrentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCurrentUser200Response>;

    /**
     * Log a user out
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    logOutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LogOut200Response>>;

    /**
     * Log a user out
     */
    logOut(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LogOut200Response>;

    /**
     * Request authentication for an email address
     * @param {string} email Email address wanting to log in
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    requestAuthenticationRaw(requestParameters: RequestAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestAuthentication200Response>>;

    /**
     * Request authentication for an email address
     */
    requestAuthentication(requestParameters: RequestAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestAuthentication200Response>;

    /**
     * Verifies email address ownership and authenticates user for further API actions
     * @param {string} email Email address wanting to log in
     * @param {string} code Secure code sent to user\&#39;s email address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    verifyAuthenticationRaw(requestParameters: VerifyAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VerifyAuthentication200Response>>;

    /**
     * Verifies email address ownership and authenticates user for further API actions
     */
    verifyAuthentication(requestParameters: VerifyAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VerifyAuthentication200Response>;

}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI implements UserApiInterface {

    /**
     * Creates a new user
     */
    async createAUserRaw(requestParameters: CreateAUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCurrentUser200ResponseData>> {
        if (requestParameters.createAUserRequest === null || requestParameters.createAUserRequest === undefined) {
            throw new runtime.RequiredError('createAUserRequest','Required parameter requestParameters.createAUserRequest was null or undefined when calling createAUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAUserRequestToJSON(requestParameters.createAUserRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCurrentUser200ResponseDataFromJSON(jsonValue));
    }

    /**
     * Creates a new user
     */
    async createAUser(requestParameters: CreateAUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCurrentUser200ResponseData> {
        const response = await this.createAUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the currently authenticated user, if any
     */
    async getCurrentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCurrentUser200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCurrentUser200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the currently authenticated user, if any
     */
    async getCurrentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCurrentUser200Response> {
        const response = await this.getCurrentUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * Log a user out
     */
    async logOutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LogOut200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/logout/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LogOut200ResponseFromJSON(jsonValue));
    }

    /**
     * Log a user out
     */
    async logOut(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LogOut200Response> {
        const response = await this.logOutRaw(initOverrides);
        return await response.value();
    }

    /**
     * Request authentication for an email address
     */
    async requestAuthenticationRaw(requestParameters: RequestAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestAuthentication200Response>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling requestAuthentication.');
        }

        const queryParameters: any = {};

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/authenticate/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestAuthentication200ResponseFromJSON(jsonValue));
    }

    /**
     * Request authentication for an email address
     */
    async requestAuthentication(requestParameters: RequestAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestAuthentication200Response> {
        const response = await this.requestAuthenticationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verifies email address ownership and authenticates user for further API actions
     */
    async verifyAuthenticationRaw(requestParameters: VerifyAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VerifyAuthentication200Response>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling verifyAuthentication.');
        }

        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling verifyAuthentication.');
        }

        const queryParameters: any = {};

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/verify/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VerifyAuthentication200ResponseFromJSON(jsonValue));
    }

    /**
     * Verifies email address ownership and authenticates user for further API actions
     */
    async verifyAuthentication(requestParameters: VerifyAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VerifyAuthentication200Response> {
        const response = await this.verifyAuthenticationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
