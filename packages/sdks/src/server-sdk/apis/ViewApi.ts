/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateViewRequest,
  GetViews200ResponseInner,
  UpdateViewRequest,
} from '../models';
import {
    CreateViewRequestFromJSON,
    CreateViewRequestToJSON,
    GetViews200ResponseInnerFromJSON,
    GetViews200ResponseInnerToJSON,
    UpdateViewRequestFromJSON,
    UpdateViewRequestToJSON,
} from '../models';

export interface CreateViewOperationRequest {
    createViewRequest: CreateViewRequest;
}

export interface DeleteViewRequest {
    id: string;
}

export interface GetViewRequest {
    id: string;
}

export interface UpdateViewOperationRequest {
    id: string;
    updateViewRequest?: UpdateViewRequest;
}

/**
 * ViewApi - interface
 * 
 * @export
 * @interface ViewApiInterface
 */
export interface ViewApiInterface {
    /**
     * Creates a view in the current workspace
     * @param {CreateViewRequest} createViewRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewApiInterface
     */
    createViewRaw(requestParameters: CreateViewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetViews200ResponseInner>>;

    /**
     * Creates a view in the current workspace
     */
    createView(requestParameters: CreateViewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetViews200ResponseInner>;

    /**
     * Delete a view using its ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewApiInterface
     */
    deleteViewRaw(requestParameters: DeleteViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetViews200ResponseInner>>;

    /**
     * Delete a view using its ID
     */
    deleteView(requestParameters: DeleteViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetViews200ResponseInner>;

    /**
     * Return a view by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewApiInterface
     */
    getViewRaw(requestParameters: GetViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetViews200ResponseInner>>;

    /**
     * Return a view by ID
     */
    getView(requestParameters: GetViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetViews200ResponseInner>;

    /**
     * Returns the current workspace\'s views
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewApiInterface
     */
    getViewsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetViews200ResponseInner>>>;

    /**
     * Returns the current workspace\'s views
     */
    getViews(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetViews200ResponseInner>>;

    /**
     * Update a view by ID
     * @param {string} id 
     * @param {UpdateViewRequest} [updateViewRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewApiInterface
     */
    updateViewRaw(requestParameters: UpdateViewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetViews200ResponseInner>>;

    /**
     * Update a view by ID
     */
    updateView(requestParameters: UpdateViewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetViews200ResponseInner>;

}

/**
 * 
 */
export class ViewApi extends runtime.BaseAPI implements ViewApiInterface {

    /**
     * Creates a view in the current workspace
     */
    async createViewRaw(requestParameters: CreateViewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetViews200ResponseInner>> {
        if (requestParameters.createViewRequest === null || requestParameters.createViewRequest === undefined) {
            throw new runtime.RequiredError('createViewRequest','Required parameter requestParameters.createViewRequest was null or undefined when calling createView.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspace/views/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateViewRequestToJSON(requestParameters.createViewRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetViews200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Creates a view in the current workspace
     */
    async createView(requestParameters: CreateViewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetViews200ResponseInner> {
        const response = await this.createViewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a view using its ID
     */
    async deleteViewRaw(requestParameters: DeleteViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetViews200ResponseInner>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteView.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/views/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetViews200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Delete a view using its ID
     */
    async deleteView(requestParameters: DeleteViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetViews200ResponseInner> {
        const response = await this.deleteViewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a view by ID
     */
    async getViewRaw(requestParameters: GetViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetViews200ResponseInner>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getView.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/views/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetViews200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Return a view by ID
     */
    async getView(requestParameters: GetViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetViews200ResponseInner> {
        const response = await this.getViewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the current workspace\'s views
     */
    async getViewsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetViews200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/views/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetViews200ResponseInnerFromJSON));
    }

    /**
     * Returns the current workspace\'s views
     */
    async getViews(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetViews200ResponseInner>> {
        const response = await this.getViewsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update a view by ID
     */
    async updateViewRaw(requestParameters: UpdateViewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetViews200ResponseInner>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateView.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspace/views/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateViewRequestToJSON(requestParameters.updateViewRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetViews200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Update a view by ID
     */
    async updateView(requestParameters: UpdateViewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetViews200ResponseInner> {
        const response = await this.updateViewRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
