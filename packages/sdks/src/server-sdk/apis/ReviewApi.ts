/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetReview200Response,
  GetReviews200ResponseInner,
  GetReviewsRequest,
  UpdateReview200Response,
  UpdateReviewRequest,
} from '../models';
import {
    GetReview200ResponseFromJSON,
    GetReview200ResponseToJSON,
    GetReviews200ResponseInnerFromJSON,
    GetReviews200ResponseInnerToJSON,
    GetReviewsRequestFromJSON,
    GetReviewsRequestToJSON,
    UpdateReview200ResponseFromJSON,
    UpdateReview200ResponseToJSON,
    UpdateReviewRequestFromJSON,
    UpdateReviewRequestToJSON,
} from '../models';

export interface GetReviewRequest {
    id: string;
    purpose?: GetReviewPurposeEnum;
}

export interface GetReviewsOperationRequest {
    getReviewsRequest?: GetReviewsRequest;
}

export interface UpdateReviewOperationRequest {
    id: string;
    updateReviewRequest?: UpdateReviewRequest;
}

/**
 * ReviewApi - interface
 * 
 * @export
 * @interface ReviewApiInterface
 */
export interface ReviewApiInterface {
    /**
     * Get a review within the current workspace
     * @param {string} id 
     * @param {'review'} [purpose] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewApiInterface
     */
    getReviewRaw(requestParameters: GetReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetReview200Response>>;

    /**
     * Get a review within the current workspace
     */
    getReview(requestParameters: GetReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetReview200Response>;

    /**
     * Get reviews for the current workspace
     * @param {GetReviewsRequest} [getReviewsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewApiInterface
     */
    getReviewsRaw(requestParameters: GetReviewsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetReviews200ResponseInner>>>;

    /**
     * Get reviews for the current workspace
     */
    getReviews(requestParameters: GetReviewsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetReviews200ResponseInner>>;

    /**
     * Updates a review\'s responses
     * @param {string} id 
     * @param {UpdateReviewRequest} [updateReviewRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewApiInterface
     */
    updateReviewRaw(requestParameters: UpdateReviewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateReview200Response>>;

    /**
     * Updates a review\'s responses
     */
    updateReview(requestParameters: UpdateReviewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateReview200Response>;

}

/**
 * 
 */
export class ReviewApi extends runtime.BaseAPI implements ReviewApiInterface {

    /**
     * Get a review within the current workspace
     */
    async getReviewRaw(requestParameters: GetReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetReview200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getReview.');
        }

        const queryParameters: any = {};

        if (requestParameters.purpose !== undefined) {
            queryParameters['purpose'] = requestParameters.purpose;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/reviews/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetReview200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a review within the current workspace
     */
    async getReview(requestParameters: GetReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetReview200Response> {
        const response = await this.getReviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get reviews for the current workspace
     */
    async getReviewsRaw(requestParameters: GetReviewsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetReviews200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspace/reviews/`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GetReviewsRequestToJSON(requestParameters.getReviewsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetReviews200ResponseInnerFromJSON));
    }

    /**
     * Get reviews for the current workspace
     */
    async getReviews(requestParameters: GetReviewsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetReviews200ResponseInner>> {
        const response = await this.getReviewsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a review\'s responses
     */
    async updateReviewRaw(requestParameters: UpdateReviewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateReview200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateReview.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspace/reviews/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateReviewRequestToJSON(requestParameters.updateReviewRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateReview200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates a review\'s responses
     */
    async updateReview(requestParameters: UpdateReviewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateReview200Response> {
        const response = await this.updateReviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum GetReviewPurposeEnum {
    Review = 'review'
}
