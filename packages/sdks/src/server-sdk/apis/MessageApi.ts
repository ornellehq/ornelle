/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateMessageRequest,
  GetMessage200Response,
  GetMessages200ResponseInner,
} from '../models';
import {
    CreateMessageRequestFromJSON,
    CreateMessageRequestToJSON,
    GetMessage200ResponseFromJSON,
    GetMessage200ResponseToJSON,
    GetMessages200ResponseInnerFromJSON,
    GetMessages200ResponseInnerToJSON,
} from '../models';

export interface CreateMessageOperationRequest {
    createMessageRequest: CreateMessageRequest;
}

export interface GetMessageRequest {
    id: string;
    includeParents?: boolean;
}

/**
 * MessageApi - interface
 * 
 * @export
 * @interface MessageApiInterface
 */
export interface MessageApiInterface {
    /**
     * Creates a new message in the workspace
     * @param {CreateMessageRequest} createMessageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApiInterface
     */
    createMessageRaw(requestParameters: CreateMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMessages200ResponseInner>>;

    /**
     * Creates a new message in the workspace
     */
    createMessage(requestParameters: CreateMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMessages200ResponseInner>;

    /**
     * Returns a message with the current workspace
     * @param {string} id 
     * @param {boolean} [includeParents] Whether to include parent messages up to 5 levels deep
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApiInterface
     */
    getMessageRaw(requestParameters: GetMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMessage200Response>>;

    /**
     * Returns a message with the current workspace
     */
    getMessage(requestParameters: GetMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMessage200Response>;

    /**
     * Returns the current workspace\'s messages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApiInterface
     */
    getMessagesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetMessages200ResponseInner>>>;

    /**
     * Returns the current workspace\'s messages
     */
    getMessages(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetMessages200ResponseInner>>;

}

/**
 * 
 */
export class MessageApi extends runtime.BaseAPI implements MessageApiInterface {

    /**
     * Creates a new message in the workspace
     */
    async createMessageRaw(requestParameters: CreateMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMessages200ResponseInner>> {
        if (requestParameters.createMessageRequest === null || requestParameters.createMessageRequest === undefined) {
            throw new runtime.RequiredError('createMessageRequest','Required parameter requestParameters.createMessageRequest was null or undefined when calling createMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspace/messages/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMessageRequestToJSON(requestParameters.createMessageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMessages200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Creates a new message in the workspace
     */
    async createMessage(requestParameters: CreateMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMessages200ResponseInner> {
        const response = await this.createMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a message with the current workspace
     */
    async getMessageRaw(requestParameters: GetMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMessage200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMessage.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeParents !== undefined) {
            queryParameters['includeParents'] = requestParameters.includeParents;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/messages/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMessage200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a message with the current workspace
     */
    async getMessage(requestParameters: GetMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMessage200Response> {
        const response = await this.getMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the current workspace\'s messages
     */
    async getMessagesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetMessages200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/messages/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetMessages200ResponseInnerFromJSON));
    }

    /**
     * Returns the current workspace\'s messages
     */
    async getMessages(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetMessages200ResponseInner>> {
        const response = await this.getMessagesRaw(initOverrides);
        return await response.value();
    }

}
