/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.15.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  ContinueOnboardingWorkflow400Response,
  ContinueOnboardingWorkflowRequest,
  GetOnboardingData200Response,
  GetOpenings500Response,
  GetSpecificOnboardingData200Response,
  StartOnboardingWorkflow201Response,
  StartOnboardingWorkflow409Response,
  StartOnboardingWorkflowRequest,
  UpdateOnboardingData400Response,
  UpdateOnboardingDataRequest,
} from "../models"
import {
  ContinueOnboardingWorkflow400ResponseFromJSON,
  ContinueOnboardingWorkflow400ResponseToJSON,
  ContinueOnboardingWorkflowRequestFromJSON,
  ContinueOnboardingWorkflowRequestToJSON,
  GetOnboardingData200ResponseFromJSON,
  GetOnboardingData200ResponseToJSON,
  GetOpenings500ResponseFromJSON,
  GetOpenings500ResponseToJSON,
  GetSpecificOnboardingData200ResponseFromJSON,
  GetSpecificOnboardingData200ResponseToJSON,
  StartOnboardingWorkflow201ResponseFromJSON,
  StartOnboardingWorkflow201ResponseToJSON,
  StartOnboardingWorkflow409ResponseFromJSON,
  StartOnboardingWorkflow409ResponseToJSON,
  StartOnboardingWorkflowRequestFromJSON,
  StartOnboardingWorkflowRequestToJSON,
  UpdateOnboardingData400ResponseFromJSON,
  UpdateOnboardingData400ResponseToJSON,
  UpdateOnboardingDataRequestFromJSON,
  UpdateOnboardingDataRequestToJSON,
} from "../models"
import * as runtime from "../runtime"

export interface ContinueOnboardingWorkflowOperationRequest {
  continueOnboardingWorkflowRequest: ContinueOnboardingWorkflowRequest
}

export interface GetSpecificOnboardingDataRequest {
  id: GetSpecificOnboardingDataIdEnum
}

export interface StartOnboardingWorkflowOperationRequest {
  startOnboardingWorkflowRequest?: StartOnboardingWorkflowRequest
}

export interface UpdateOnboardingDataOperationRequest {
  updateOnboardingDataRequest: UpdateOnboardingDataRequest
}

/**
 * OnboardingApi - interface
 *
 * @export
 * @interface OnboardingApiInterface
 */
export interface OnboardingApiInterface {
  /**
   * Signals the onboarding workflow to continue to the next step
   * @param {ContinueOnboardingWorkflowRequest} continueOnboardingWorkflowRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OnboardingApiInterface
   */
  continueOnboardingWorkflowRaw(
    requestParameters: ContinueOnboardingWorkflowOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetOpenings500Response>>

  /**
   * Signals the onboarding workflow to continue to the next step
   */
  continueOnboardingWorkflow(
    requestParameters: ContinueOnboardingWorkflowOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetOpenings500Response>

  /**
   * Returns the current workspace\'s onboarding data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OnboardingApiInterface
   */
  getOnboardingDataRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetOnboardingData200Response>>

  /**
   * Returns the current workspace\'s onboarding data
   */
  getOnboardingData(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetOnboardingData200Response>

  /**
   * Returns a specific step of the onboarding data
   * @param {'company-details' | 'hiring-process' | 'forms-templates' | 'permission-groups'} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OnboardingApiInterface
   */
  getSpecificOnboardingDataRaw(
    requestParameters: GetSpecificOnboardingDataRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetSpecificOnboardingData200Response>>

  /**
   * Returns a specific step of the onboarding data
   */
  getSpecificOnboardingData(
    requestParameters: GetSpecificOnboardingDataRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetSpecificOnboardingData200Response>

  /**
   * Starts the onboarding workflow for the current workspace
   * @param {StartOnboardingWorkflowRequest} [startOnboardingWorkflowRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OnboardingApiInterface
   */
  startOnboardingWorkflowRaw(
    requestParameters: StartOnboardingWorkflowOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<StartOnboardingWorkflow201Response>>

  /**
   * Starts the onboarding workflow for the current workspace
   */
  startOnboardingWorkflow(
    requestParameters: StartOnboardingWorkflowOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<StartOnboardingWorkflow201Response>

  /**
   * Updates onboarding data for the current workspace
   * @param {UpdateOnboardingDataRequest} updateOnboardingDataRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OnboardingApiInterface
   */
  updateOnboardingDataRaw(
    requestParameters: UpdateOnboardingDataOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetOpenings500Response>>

  /**
   * Updates onboarding data for the current workspace
   */
  updateOnboardingData(
    requestParameters: UpdateOnboardingDataOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetOpenings500Response>
}

/**
 *
 */
export class OnboardingApi
  extends runtime.BaseAPI
  implements OnboardingApiInterface
{
  /**
   * Signals the onboarding workflow to continue to the next step
   */
  async continueOnboardingWorkflowRaw(
    requestParameters: ContinueOnboardingWorkflowOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetOpenings500Response>> {
    if (
      requestParameters.continueOnboardingWorkflowRequest === null ||
      requestParameters.continueOnboardingWorkflowRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "continueOnboardingWorkflowRequest",
        "Required parameter requestParameters.continueOnboardingWorkflowRequest was null or undefined when calling continueOnboardingWorkflow.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization") // permissions authentication
    }

    const response = await this.request(
      {
        path: `/workspace/onboarding/`,
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: ContinueOnboardingWorkflowRequestToJSON(
          requestParameters.continueOnboardingWorkflowRequest,
        ),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetOpenings500ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Signals the onboarding workflow to continue to the next step
   */
  async continueOnboardingWorkflow(
    requestParameters: ContinueOnboardingWorkflowOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetOpenings500Response> {
    const response = await this.continueOnboardingWorkflowRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Returns the current workspace\'s onboarding data
   */
  async getOnboardingDataRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetOnboardingData200Response>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization") // permissions authentication
    }

    const response = await this.request(
      {
        path: `/workspace/onboarding/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetOnboardingData200ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Returns the current workspace\'s onboarding data
   */
  async getOnboardingData(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetOnboardingData200Response> {
    const response = await this.getOnboardingDataRaw(initOverrides)
    return await response.value()
  }

  /**
   * Returns a specific step of the onboarding data
   */
  async getSpecificOnboardingDataRaw(
    requestParameters: GetSpecificOnboardingDataRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetSpecificOnboardingData200Response>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling getSpecificOnboardingData.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization") // permissions authentication
    }

    const response = await this.request(
      {
        path: `/workspace/onboarding/{id}/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetSpecificOnboardingData200ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Returns a specific step of the onboarding data
   */
  async getSpecificOnboardingData(
    requestParameters: GetSpecificOnboardingDataRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetSpecificOnboardingData200Response> {
    const response = await this.getSpecificOnboardingDataRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Starts the onboarding workflow for the current workspace
   */
  async startOnboardingWorkflowRaw(
    requestParameters: StartOnboardingWorkflowOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<StartOnboardingWorkflow201Response>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization") // permissions authentication
    }

    const response = await this.request(
      {
        path: `/workspace/onboarding/`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: StartOnboardingWorkflowRequestToJSON(
          requestParameters.startOnboardingWorkflowRequest,
        ),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      StartOnboardingWorkflow201ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Starts the onboarding workflow for the current workspace
   */
  async startOnboardingWorkflow(
    requestParameters: StartOnboardingWorkflowOperationRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<StartOnboardingWorkflow201Response> {
    const response = await this.startOnboardingWorkflowRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Updates onboarding data for the current workspace
   */
  async updateOnboardingDataRaw(
    requestParameters: UpdateOnboardingDataOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetOpenings500Response>> {
    if (
      requestParameters.updateOnboardingDataRequest === null ||
      requestParameters.updateOnboardingDataRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "updateOnboardingDataRequest",
        "Required parameter requestParameters.updateOnboardingDataRequest was null or undefined when calling updateOnboardingData.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization") // permissions authentication
    }

    const response = await this.request(
      {
        path: `/workspace/onboarding/`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateOnboardingDataRequestToJSON(
          requestParameters.updateOnboardingDataRequest,
        ),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetOpenings500ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Updates onboarding data for the current workspace
   */
  async updateOnboardingData(
    requestParameters: UpdateOnboardingDataOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetOpenings500Response> {
    const response = await this.updateOnboardingDataRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }
}

/**
 * @export
 * @enum {string}
 */
export enum GetSpecificOnboardingDataIdEnum {
  CompanyDetails = "company-details",
  HiringProcess = "hiring-process",
  FormsTemplates = "forms-templates",
  PermissionGroups = "permission-groups",
}
