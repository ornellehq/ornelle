/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.15.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  WorkspaceCalendarAvailableSlotsGet200Response,
  WorkspaceCalendarCalendarsGet200Response,
  WorkspaceCalendarIntegrationsGet200Response,
  WorkspaceCalendarIntegrationsIdDelete200Response,
  WorkspaceCalendarIntegrationsIdDelete200Response1,
  WorkspaceCalendarIntegrationsIdDeleteRequest,
} from "../models"
import {
  WorkspaceCalendarAvailableSlotsGet200ResponseFromJSON,
  WorkspaceCalendarAvailableSlotsGet200ResponseToJSON,
  WorkspaceCalendarCalendarsGet200ResponseFromJSON,
  WorkspaceCalendarCalendarsGet200ResponseToJSON,
  WorkspaceCalendarIntegrationsGet200ResponseFromJSON,
  WorkspaceCalendarIntegrationsGet200ResponseToJSON,
  WorkspaceCalendarIntegrationsIdDelete200Response1FromJSON,
  WorkspaceCalendarIntegrationsIdDelete200Response1ToJSON,
  WorkspaceCalendarIntegrationsIdDelete200ResponseFromJSON,
  WorkspaceCalendarIntegrationsIdDelete200ResponseToJSON,
  WorkspaceCalendarIntegrationsIdDeleteRequestFromJSON,
  WorkspaceCalendarIntegrationsIdDeleteRequestToJSON,
} from "../models"
import * as runtime from "../runtime"

export interface WorkspaceCalendarAvailableSlotsGetRequest {
  profileId: string
  startDate: Date
  endDate: Date
  duration: number
  interval?: number
  bufferTime?: number
}

export interface WorkspaceCalendarCalendarsGetRequest {
  profileId: string
  provider: WorkspaceCalendarCalendarsGetProviderEnum
}

export interface WorkspaceCalendarIntegrationsGetRequest {
  profileId: string
}

export interface WorkspaceCalendarIntegrationsIdDeleteRequest {
  id: string
}

export interface WorkspaceCalendarIntegrationsIdPutRequest {
  id: string
  workspaceCalendarIntegrationsIdDeleteRequest?: WorkspaceCalendarIntegrationsIdDeleteRequest
}

/**
 * CalendarApi - interface
 *
 * @export
 * @interface CalendarApiInterface
 */
export interface CalendarApiInterface {
  /**
   * Get available time slots for a profile
   * @param {string} profileId
   * @param {Date} startDate
   * @param {Date} endDate
   * @param {number} duration
   * @param {number} [interval]
   * @param {number} [bufferTime]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarApiInterface
   */
  workspaceCalendarAvailableSlotsGetRaw(
    requestParameters: WorkspaceCalendarAvailableSlotsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<WorkspaceCalendarAvailableSlotsGet200Response>>

  /**
   * Get available time slots for a profile
   */
  workspaceCalendarAvailableSlotsGet(
    requestParameters: WorkspaceCalendarAvailableSlotsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<WorkspaceCalendarAvailableSlotsGet200Response>

  /**
   * Get list of available calendars for a provider
   * @param {string} profileId
   * @param {'google' | 'microsoft'} provider
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarApiInterface
   */
  workspaceCalendarCalendarsGetRaw(
    requestParameters: WorkspaceCalendarCalendarsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<WorkspaceCalendarCalendarsGet200Response>>

  /**
   * Get list of available calendars for a provider
   */
  workspaceCalendarCalendarsGet(
    requestParameters: WorkspaceCalendarCalendarsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<WorkspaceCalendarCalendarsGet200Response>

  /**
   * Get calendar integrations for the current profile
   * @param {string} profileId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarApiInterface
   */
  workspaceCalendarIntegrationsGetRaw(
    requestParameters: WorkspaceCalendarIntegrationsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<WorkspaceCalendarIntegrationsGet200Response>>

  /**
   * Get calendar integrations for the current profile
   */
  workspaceCalendarIntegrationsGet(
    requestParameters: WorkspaceCalendarIntegrationsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<WorkspaceCalendarIntegrationsGet200Response>

  /**
   * Delete a calendar integration
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarApiInterface
   */
  workspaceCalendarIntegrationsIdDeleteRaw(
    requestParameters: WorkspaceCalendarIntegrationsIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<
    runtime.ApiResponse<WorkspaceCalendarIntegrationsIdDelete200Response1>
  >

  /**
   * Delete a calendar integration
   */
  workspaceCalendarIntegrationsIdDelete(
    requestParameters: WorkspaceCalendarIntegrationsIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<WorkspaceCalendarIntegrationsIdDelete200Response1>

  /**
   * Update calendar integration settings
   * @param {string} id
   * @param {WorkspaceCalendarIntegrationsIdDeleteRequest} [workspaceCalendarIntegrationsIdDeleteRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarApiInterface
   */
  workspaceCalendarIntegrationsIdPutRaw(
    requestParameters: WorkspaceCalendarIntegrationsIdPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<
    runtime.ApiResponse<WorkspaceCalendarIntegrationsIdDelete200Response>
  >

  /**
   * Update calendar integration settings
   */
  workspaceCalendarIntegrationsIdPut(
    requestParameters: WorkspaceCalendarIntegrationsIdPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<WorkspaceCalendarIntegrationsIdDelete200Response>
}

/**
 *
 */
export class CalendarApi
  extends runtime.BaseAPI
  implements CalendarApiInterface
{
  /**
   * Get available time slots for a profile
   */
  async workspaceCalendarAvailableSlotsGetRaw(
    requestParameters: WorkspaceCalendarAvailableSlotsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<
    runtime.ApiResponse<WorkspaceCalendarAvailableSlotsGet200Response>
  > {
    if (
      requestParameters.profileId === null ||
      requestParameters.profileId === undefined
    ) {
      throw new runtime.RequiredError(
        "profileId",
        "Required parameter requestParameters.profileId was null or undefined when calling workspaceCalendarAvailableSlotsGet.",
      )
    }

    if (
      requestParameters.startDate === null ||
      requestParameters.startDate === undefined
    ) {
      throw new runtime.RequiredError(
        "startDate",
        "Required parameter requestParameters.startDate was null or undefined when calling workspaceCalendarAvailableSlotsGet.",
      )
    }

    if (
      requestParameters.endDate === null ||
      requestParameters.endDate === undefined
    ) {
      throw new runtime.RequiredError(
        "endDate",
        "Required parameter requestParameters.endDate was null or undefined when calling workspaceCalendarAvailableSlotsGet.",
      )
    }

    if (
      requestParameters.duration === null ||
      requestParameters.duration === undefined
    ) {
      throw new runtime.RequiredError(
        "duration",
        "Required parameter requestParameters.duration was null or undefined when calling workspaceCalendarAvailableSlotsGet.",
      )
    }

    const queryParameters: any = {}

    if (requestParameters.profileId !== undefined) {
      queryParameters["profileId"] = requestParameters.profileId
    }

    if (requestParameters.startDate !== undefined) {
      queryParameters["startDate"] = (
        requestParameters.startDate as any
      ).toISOString()
    }

    if (requestParameters.endDate !== undefined) {
      queryParameters["endDate"] = (
        requestParameters.endDate as any
      ).toISOString()
    }

    if (requestParameters.duration !== undefined) {
      queryParameters["duration"] = requestParameters.duration
    }

    if (requestParameters.interval !== undefined) {
      queryParameters["interval"] = requestParameters.interval
    }

    if (requestParameters.bufferTime !== undefined) {
      queryParameters["bufferTime"] = requestParameters.bufferTime
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/workspace/calendar/available-slots`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      WorkspaceCalendarAvailableSlotsGet200ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Get available time slots for a profile
   */
  async workspaceCalendarAvailableSlotsGet(
    requestParameters: WorkspaceCalendarAvailableSlotsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<WorkspaceCalendarAvailableSlotsGet200Response> {
    const response = await this.workspaceCalendarAvailableSlotsGetRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Get list of available calendars for a provider
   */
  async workspaceCalendarCalendarsGetRaw(
    requestParameters: WorkspaceCalendarCalendarsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<WorkspaceCalendarCalendarsGet200Response>> {
    if (
      requestParameters.profileId === null ||
      requestParameters.profileId === undefined
    ) {
      throw new runtime.RequiredError(
        "profileId",
        "Required parameter requestParameters.profileId was null or undefined when calling workspaceCalendarCalendarsGet.",
      )
    }

    if (
      requestParameters.provider === null ||
      requestParameters.provider === undefined
    ) {
      throw new runtime.RequiredError(
        "provider",
        "Required parameter requestParameters.provider was null or undefined when calling workspaceCalendarCalendarsGet.",
      )
    }

    const queryParameters: any = {}

    if (requestParameters.profileId !== undefined) {
      queryParameters["profileId"] = requestParameters.profileId
    }

    if (requestParameters.provider !== undefined) {
      queryParameters["provider"] = requestParameters.provider
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/workspace/calendar/calendars`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      WorkspaceCalendarCalendarsGet200ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Get list of available calendars for a provider
   */
  async workspaceCalendarCalendarsGet(
    requestParameters: WorkspaceCalendarCalendarsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<WorkspaceCalendarCalendarsGet200Response> {
    const response = await this.workspaceCalendarCalendarsGetRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Get calendar integrations for the current profile
   */
  async workspaceCalendarIntegrationsGetRaw(
    requestParameters: WorkspaceCalendarIntegrationsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<WorkspaceCalendarIntegrationsGet200Response>> {
    if (
      requestParameters.profileId === null ||
      requestParameters.profileId === undefined
    ) {
      throw new runtime.RequiredError(
        "profileId",
        "Required parameter requestParameters.profileId was null or undefined when calling workspaceCalendarIntegrationsGet.",
      )
    }

    const queryParameters: any = {}

    if (requestParameters.profileId !== undefined) {
      queryParameters["profileId"] = requestParameters.profileId
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/workspace/calendar/integrations`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      WorkspaceCalendarIntegrationsGet200ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Get calendar integrations for the current profile
   */
  async workspaceCalendarIntegrationsGet(
    requestParameters: WorkspaceCalendarIntegrationsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<WorkspaceCalendarIntegrationsGet200Response> {
    const response = await this.workspaceCalendarIntegrationsGetRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Delete a calendar integration
   */
  async workspaceCalendarIntegrationsIdDeleteRaw(
    requestParameters: WorkspaceCalendarIntegrationsIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<
    runtime.ApiResponse<WorkspaceCalendarIntegrationsIdDelete200Response1>
  > {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling workspaceCalendarIntegrationsIdDelete.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/workspace/calendar/integrations/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      WorkspaceCalendarIntegrationsIdDelete200Response1FromJSON(jsonValue),
    )
  }

  /**
   * Delete a calendar integration
   */
  async workspaceCalendarIntegrationsIdDelete(
    requestParameters: WorkspaceCalendarIntegrationsIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<WorkspaceCalendarIntegrationsIdDelete200Response1> {
    const response = await this.workspaceCalendarIntegrationsIdDeleteRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Update calendar integration settings
   */
  async workspaceCalendarIntegrationsIdPutRaw(
    requestParameters: WorkspaceCalendarIntegrationsIdPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<
    runtime.ApiResponse<WorkspaceCalendarIntegrationsIdDelete200Response>
  > {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling workspaceCalendarIntegrationsIdPut.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/workspace/calendar/integrations/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: WorkspaceCalendarIntegrationsIdDeleteRequestToJSON(
          requestParameters.workspaceCalendarIntegrationsIdDeleteRequest,
        ),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      WorkspaceCalendarIntegrationsIdDelete200ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Update calendar integration settings
   */
  async workspaceCalendarIntegrationsIdPut(
    requestParameters: WorkspaceCalendarIntegrationsIdPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<WorkspaceCalendarIntegrationsIdDelete200Response> {
    const response = await this.workspaceCalendarIntegrationsIdPutRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }
}

/**
 * @export
 * @enum {string}
 */
export enum WorkspaceCalendarCalendarsGetProviderEnum {
  Google = "google",
  Microsoft = "microsoft",
}
