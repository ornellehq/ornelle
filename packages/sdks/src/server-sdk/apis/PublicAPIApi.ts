/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.15.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  CreateAnApplication201Response,
  CreateAnApplication400Response,
  CreateAnApplicationRequest,
  GetOpening200Response,
  GetOpenings200Response,
  GetOpenings200ResponseInner,
  GetOpenings500Response,
} from "../models"
import {
  CreateAnApplication201ResponseFromJSON,
  CreateAnApplication201ResponseToJSON,
  CreateAnApplication400ResponseFromJSON,
  CreateAnApplication400ResponseToJSON,
  CreateAnApplicationRequestFromJSON,
  CreateAnApplicationRequestToJSON,
  GetOpening200ResponseFromJSON,
  GetOpening200ResponseToJSON,
  GetOpenings200ResponseFromJSON,
  GetOpenings200ResponseInnerFromJSON,
  GetOpenings200ResponseInnerToJSON,
  GetOpenings200ResponseToJSON,
  GetOpenings500ResponseFromJSON,
  GetOpenings500ResponseToJSON,
} from "../models"
import * as runtime from "../runtime"

export interface CreateAnApplicationOperationRequest {
  createAnApplicationRequest: CreateAnApplicationRequest
}

export interface GetOpeningRequest {
  id: string
}

export interface GetOpenings0Request {
  filter?: string
}

/**
 * PublicAPIApi - interface
 *
 * @export
 * @interface PublicAPIApiInterface
 */
export interface PublicAPIApiInterface {
  /**
   * Submit a job application with resume and candidate information
   * @param {CreateAnApplicationRequest} createAnApplicationRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PublicAPIApiInterface
   */
  createAnApplicationRaw(
    requestParameters: CreateAnApplicationOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateAnApplication201Response>>

  /**
   * Submit a job application with resume and candidate information
   */
  createAnApplication(
    requestParameters: CreateAnApplicationOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateAnApplication201Response>

  /**
   * Retrieves detailed information for a specific job opening by ID, including allowed custom fields.
   * @param {string} id The unique identifier of the opening
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PublicAPIApiInterface
   */
  getOpeningRaw(
    requestParameters: GetOpeningRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetOpening200Response>>

  /**
   * Retrieves detailed information for a specific job opening by ID, including allowed custom fields.
   */
  getOpening(
    requestParameters: GetOpeningRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetOpening200Response>

  /**
   * Get available filter fields as configured in workspace settings
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PublicAPIApiInterface
   */
  getOpeningsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GetOpenings200ResponseInner>>>

  /**
   * Get available filter fields as configured in workspace settings
   */
  getOpenings(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GetOpenings200ResponseInner>>

  /**
   * Retrieves a list of job openings with attribute-based filtering
   * @param {string} [filter] JSON string with array of filter objects. Each filter object must have attributeId and value properties.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PublicAPIApiInterface
   */
  getOpenings_1Raw(
    requestParameters: GetOpenings0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetOpenings200Response>>

  /**
   * Retrieves a list of job openings with attribute-based filtering
   */
  getOpenings_1(
    requestParameters: GetOpenings0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetOpenings200Response>
}

/**
 *
 */
export class PublicAPIApi
  extends runtime.BaseAPI
  implements PublicAPIApiInterface
{
  /**
   * Submit a job application with resume and candidate information
   */
  async createAnApplicationRaw(
    requestParameters: CreateAnApplicationOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateAnApplication201Response>> {
    if (
      requestParameters.createAnApplicationRequest === null ||
      requestParameters.createAnApplicationRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "createAnApplicationRequest",
        "Required parameter requestParameters.createAnApplicationRequest was null or undefined when calling createAnApplication.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/v1/applications/`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateAnApplicationRequestToJSON(
          requestParameters.createAnApplicationRequest,
        ),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateAnApplication201ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Submit a job application with resume and candidate information
   */
  async createAnApplication(
    requestParameters: CreateAnApplicationOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateAnApplication201Response> {
    const response = await this.createAnApplicationRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Retrieves detailed information for a specific job opening by ID, including allowed custom fields.
   */
  async getOpeningRaw(
    requestParameters: GetOpeningRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetOpening200Response>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling getOpening.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/v1/openings/{id}/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetOpening200ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Retrieves detailed information for a specific job opening by ID, including allowed custom fields.
   */
  async getOpening(
    requestParameters: GetOpeningRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetOpening200Response> {
    const response = await this.getOpeningRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Get available filter fields as configured in workspace settings
   */
  async getOpeningsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GetOpenings200ResponseInner>>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/v1/filters/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(GetOpenings200ResponseInnerFromJSON),
    )
  }

  /**
   * Get available filter fields as configured in workspace settings
   */
  async getOpenings(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GetOpenings200ResponseInner>> {
    const response = await this.getOpeningsRaw(initOverrides)
    return await response.value()
  }

  /**
   * Retrieves a list of job openings with attribute-based filtering
   */
  async getOpenings_1Raw(
    requestParameters: GetOpenings0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetOpenings200Response>> {
    const queryParameters: any = {}

    if (requestParameters.filter !== undefined) {
      queryParameters["filter"] = requestParameters.filter
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/v1/openings/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetOpenings200ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Retrieves a list of job openings with attribute-based filtering
   */
  async getOpenings_1(
    requestParameters: GetOpenings0Request = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetOpenings200Response> {
    const response = await this.getOpenings_1Raw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }
}
