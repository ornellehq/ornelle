/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateActivity200Response,
  CreateActivityRequest,
  GetActivities200ResponseInner,
} from '../models';
import {
    CreateActivity200ResponseFromJSON,
    CreateActivity200ResponseToJSON,
    CreateActivityRequestFromJSON,
    CreateActivityRequestToJSON,
    GetActivities200ResponseInnerFromJSON,
    GetActivities200ResponseInnerToJSON,
} from '../models';

export interface CreateActivityOperationRequest {
    createActivityRequest: CreateActivityRequest;
}

export interface GetActivitiesRequest {
    input?: any;
}

/**
 * ActivityApi - interface
 * 
 * @export
 * @interface ActivityApiInterface
 */
export interface ActivityApiInterface {
    /**
     * Creates an activity in the current workspace
     * @param {CreateActivityRequest} createActivityRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApiInterface
     */
    createActivityRaw(requestParameters: CreateActivityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateActivity200Response>>;

    /**
     * Creates an activity in the current workspace
     */
    createActivity(requestParameters: CreateActivityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateActivity200Response>;

    /**
     * Gets activities in the current workspace
     * @param {any} [input] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApiInterface
     */
    getActivitiesRaw(requestParameters: GetActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetActivities200ResponseInner>>>;

    /**
     * Gets activities in the current workspace
     */
    getActivities(requestParameters: GetActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetActivities200ResponseInner>>;

}

/**
 * 
 */
export class ActivityApi extends runtime.BaseAPI implements ActivityApiInterface {

    /**
     * Creates an activity in the current workspace
     */
    async createActivityRaw(requestParameters: CreateActivityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateActivity200Response>> {
        if (requestParameters.createActivityRequest === null || requestParameters.createActivityRequest === undefined) {
            throw new runtime.RequiredError('createActivityRequest','Required parameter requestParameters.createActivityRequest was null or undefined when calling createActivity.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspace/activities/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateActivityRequestToJSON(requestParameters.createActivityRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateActivity200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates an activity in the current workspace
     */
    async createActivity(requestParameters: CreateActivityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateActivity200Response> {
        const response = await this.createActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets activities in the current workspace
     */
    async getActivitiesRaw(requestParameters: GetActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetActivities200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters.input !== undefined) {
            queryParameters['input'] = requestParameters.input;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/activities/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetActivities200ResponseInnerFromJSON));
    }

    /**
     * Gets activities in the current workspace
     */
    async getActivities(requestParameters: GetActivitiesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetActivities200ResponseInner>> {
        const response = await this.getActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
