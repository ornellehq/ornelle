/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.15.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  CreateAPIKey200Response,
  CreateAPIKeyRequest,
  GetAPIKeys200ResponseInner,
  GetOpenings500Response,
  WorkspaceCalendarIntegrationsIdDelete200Response1,
} from "../models"
import {
  CreateAPIKey200ResponseFromJSON,
  CreateAPIKey200ResponseToJSON,
  CreateAPIKeyRequestFromJSON,
  CreateAPIKeyRequestToJSON,
  GetAPIKeys200ResponseInnerFromJSON,
  GetAPIKeys200ResponseInnerToJSON,
  GetOpenings500ResponseFromJSON,
  GetOpenings500ResponseToJSON,
  WorkspaceCalendarIntegrationsIdDelete200Response1FromJSON,
  WorkspaceCalendarIntegrationsIdDelete200Response1ToJSON,
} from "../models"
import * as runtime from "../runtime"

export interface CreateAPIKeyOperationRequest {
  createAPIKeyRequest: CreateAPIKeyRequest
}

export interface RevokeAPIKeyRequest {
  id: string
}

/**
 * ApiKeyApi - interface
 *
 * @export
 * @interface ApiKeyApiInterface
 */
export interface ApiKeyApiInterface {
  /**
   * Create a new API key for the current workspace
   * @param {CreateAPIKeyRequest} createAPIKeyRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApiKeyApiInterface
   */
  createAPIKeyRaw(
    requestParameters: CreateAPIKeyOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateAPIKey200Response>>

  /**
   * Create a new API key for the current workspace
   */
  createAPIKey(
    requestParameters: CreateAPIKeyOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateAPIKey200Response>

  /**
   * Get all API keys for the current workspace
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApiKeyApiInterface
   */
  getAPIKeysRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GetAPIKeys200ResponseInner>>>

  /**
   * Get all API keys for the current workspace
   */
  getAPIKeys(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GetAPIKeys200ResponseInner>>

  /**
   * Revoke an API key for the current workspace
   * @param {string} id ID of the API key to revoke
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ApiKeyApiInterface
   */
  revokeAPIKeyRaw(
    requestParameters: RevokeAPIKeyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<
    runtime.ApiResponse<WorkspaceCalendarIntegrationsIdDelete200Response1>
  >

  /**
   * Revoke an API key for the current workspace
   */
  revokeAPIKey(
    requestParameters: RevokeAPIKeyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<WorkspaceCalendarIntegrationsIdDelete200Response1>
}

/**
 *
 */
export class ApiKeyApi extends runtime.BaseAPI implements ApiKeyApiInterface {
  /**
   * Create a new API key for the current workspace
   */
  async createAPIKeyRaw(
    requestParameters: CreateAPIKeyOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateAPIKey200Response>> {
    if (
      requestParameters.createAPIKeyRequest === null ||
      requestParameters.createAPIKeyRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "createAPIKeyRequest",
        "Required parameter requestParameters.createAPIKeyRequest was null or undefined when calling createAPIKey.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization") // permissions authentication
    }

    const response = await this.request(
      {
        path: `/workspace/api-keys/`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateAPIKeyRequestToJSON(requestParameters.createAPIKeyRequest),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateAPIKey200ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Create a new API key for the current workspace
   */
  async createAPIKey(
    requestParameters: CreateAPIKeyOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateAPIKey200Response> {
    const response = await this.createAPIKeyRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Get all API keys for the current workspace
   */
  async getAPIKeysRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GetAPIKeys200ResponseInner>>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization") // permissions authentication
    }

    const response = await this.request(
      {
        path: `/workspace/api-keys/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(GetAPIKeys200ResponseInnerFromJSON),
    )
  }

  /**
   * Get all API keys for the current workspace
   */
  async getAPIKeys(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GetAPIKeys200ResponseInner>> {
    const response = await this.getAPIKeysRaw(initOverrides)
    return await response.value()
  }

  /**
   * Revoke an API key for the current workspace
   */
  async revokeAPIKeyRaw(
    requestParameters: RevokeAPIKeyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<
    runtime.ApiResponse<WorkspaceCalendarIntegrationsIdDelete200Response1>
  > {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling revokeAPIKey.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization") // permissions authentication
    }

    const response = await this.request(
      {
        path: `/workspace/api-keys/{id}/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      WorkspaceCalendarIntegrationsIdDelete200Response1FromJSON(jsonValue),
    )
  }

  /**
   * Revoke an API key for the current workspace
   */
  async revokeAPIKey(
    requestParameters: RevokeAPIKeyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<WorkspaceCalendarIntegrationsIdDelete200Response1> {
    const response = await this.revokeAPIKeyRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }
}
