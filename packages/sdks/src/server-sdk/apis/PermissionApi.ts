/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.15.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  CreatePermission200Response,
  CreatePermissionRequest,
  Def0,
  GetPermissions200ResponseInner,
  UpdatePermissionRequest,
} from "../models"
import {
  CreatePermission200ResponseFromJSON,
  CreatePermission200ResponseToJSON,
  CreatePermissionRequestFromJSON,
  CreatePermissionRequestToJSON,
  Def0FromJSON,
  Def0ToJSON,
  GetPermissions200ResponseInnerFromJSON,
  GetPermissions200ResponseInnerToJSON,
  UpdatePermissionRequestFromJSON,
  UpdatePermissionRequestToJSON,
} from "../models"
import * as runtime from "../runtime"

export interface CreatePermissionOperationRequest {
  createPermissionRequest: CreatePermissionRequest
}

export interface DeletePermissionRequest {
  id: string
}

export interface GetPermissionRequest {
  id: string
}

export interface UpdatePermissionOperationRequest {
  id: string
  updatePermissionRequest?: UpdatePermissionRequest
}

/**
 * PermissionApi - interface
 *
 * @export
 * @interface PermissionApiInterface
 */
export interface PermissionApiInterface {
  /**
   * Creates a new permission in the current workspace
   * @param {CreatePermissionRequest} createPermissionRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PermissionApiInterface
   */
  createPermissionRaw(
    requestParameters: CreatePermissionOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreatePermission200Response>>

  /**
   * Creates a new permission in the current workspace
   */
  createPermission(
    requestParameters: CreatePermissionOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreatePermission200Response>

  /**
   * Deletes a permission by ID
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PermissionApiInterface
   */
  deletePermissionRaw(
    requestParameters: DeletePermissionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreatePermission200Response>>

  /**
   * Deletes a permission by ID
   */
  deletePermission(
    requestParameters: DeletePermissionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreatePermission200Response>

  /**
   * Get a single permission by ID
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PermissionApiInterface
   */
  getPermissionRaw(
    requestParameters: GetPermissionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreatePermission200Response>>

  /**
   * Get a single permission by ID
   */
  getPermission(
    requestParameters: GetPermissionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreatePermission200Response>

  /**
   * Fetches all permissions for the current workspace
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PermissionApiInterface
   */
  getPermissionsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GetPermissions200ResponseInner>>>

  /**
   * Fetches all permissions for the current workspace
   */
  getPermissions(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GetPermissions200ResponseInner>>

  /**
   * Updates a permission by ID
   * @param {string} id
   * @param {UpdatePermissionRequest} [updatePermissionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PermissionApiInterface
   */
  updatePermissionRaw(
    requestParameters: UpdatePermissionOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreatePermission200Response>>

  /**
   * Updates a permission by ID
   */
  updatePermission(
    requestParameters: UpdatePermissionOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreatePermission200Response>
}

/**
 *
 */
export class PermissionApi
  extends runtime.BaseAPI
  implements PermissionApiInterface
{
  /**
   * Creates a new permission in the current workspace
   */
  async createPermissionRaw(
    requestParameters: CreatePermissionOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreatePermission200Response>> {
    if (
      requestParameters.createPermissionRequest === null ||
      requestParameters.createPermissionRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "createPermissionRequest",
        "Required parameter requestParameters.createPermissionRequest was null or undefined when calling createPermission.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization") // permissions authentication
    }

    const response = await this.request(
      {
        path: `/workspace/permissions/`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreatePermissionRequestToJSON(
          requestParameters.createPermissionRequest,
        ),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreatePermission200ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Creates a new permission in the current workspace
   */
  async createPermission(
    requestParameters: CreatePermissionOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreatePermission200Response> {
    const response = await this.createPermissionRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Deletes a permission by ID
   */
  async deletePermissionRaw(
    requestParameters: DeletePermissionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreatePermission200Response>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling deletePermission.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization") // permissions authentication
    }

    const response = await this.request(
      {
        path: `/workspace/permissions/{id}/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreatePermission200ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Deletes a permission by ID
   */
  async deletePermission(
    requestParameters: DeletePermissionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreatePermission200Response> {
    const response = await this.deletePermissionRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Get a single permission by ID
   */
  async getPermissionRaw(
    requestParameters: GetPermissionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreatePermission200Response>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling getPermission.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization") // permissions authentication
    }

    const response = await this.request(
      {
        path: `/workspace/permissions/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreatePermission200ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Get a single permission by ID
   */
  async getPermission(
    requestParameters: GetPermissionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreatePermission200Response> {
    const response = await this.getPermissionRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Fetches all permissions for the current workspace
   */
  async getPermissionsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GetPermissions200ResponseInner>>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization") // permissions authentication
    }

    const response = await this.request(
      {
        path: `/workspace/permissions/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(GetPermissions200ResponseInnerFromJSON),
    )
  }

  /**
   * Fetches all permissions for the current workspace
   */
  async getPermissions(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GetPermissions200ResponseInner>> {
    const response = await this.getPermissionsRaw(initOverrides)
    return await response.value()
  }

  /**
   * Updates a permission by ID
   */
  async updatePermissionRaw(
    requestParameters: UpdatePermissionOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreatePermission200Response>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling updatePermission.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization") // permissions authentication
    }

    const response = await this.request(
      {
        path: `/workspace/permissions/{id}/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: UpdatePermissionRequestToJSON(
          requestParameters.updatePermissionRequest,
        ),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreatePermission200ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Updates a permission by ID
   */
  async updatePermission(
    requestParameters: UpdatePermissionOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreatePermission200Response> {
    const response = await this.updatePermissionRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }
}
