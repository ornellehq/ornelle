/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateRoleRequest,
  Def0,
  GetApplicationsSortsParameterInner,
  GetOpenings200ResponseInnerRole,
  GetRole200Response,
  GetRoles200ResponseInner,
  UpdateARoleRequest,
} from '../models';
import {
    CreateRoleRequestFromJSON,
    CreateRoleRequestToJSON,
    Def0FromJSON,
    Def0ToJSON,
    GetApplicationsSortsParameterInnerFromJSON,
    GetApplicationsSortsParameterInnerToJSON,
    GetOpenings200ResponseInnerRoleFromJSON,
    GetOpenings200ResponseInnerRoleToJSON,
    GetRole200ResponseFromJSON,
    GetRole200ResponseToJSON,
    GetRoles200ResponseInnerFromJSON,
    GetRoles200ResponseInnerToJSON,
    UpdateARoleRequestFromJSON,
    UpdateARoleRequestToJSON,
} from '../models';

export interface CreateRoleOperationRequest {
    createRoleRequest: CreateRoleRequest;
}

export interface DeleteRoleRequest {
    id: string;
}

export interface GetRoleRequest {
    id: string;
}

export interface GetRolesRequest {
    filters?: Array<object>;
    sorts?: Array<GetApplicationsSortsParameterInner>;
    include?: any;
}

export interface UpdateARoleOperationRequest {
    id: string;
    updateARoleRequest?: UpdateARoleRequest;
}

/**
 * RoleApi - interface
 * 
 * @export
 * @interface RoleApiInterface
 */
export interface RoleApiInterface {
    /**
     * Creates a role in the current workspace
     * @param {CreateRoleRequest} createRoleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApiInterface
     */
    createRoleRaw(requestParameters: CreateRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOpenings200ResponseInnerRole>>;

    /**
     * Creates a role in the current workspace
     */
    createRole(requestParameters: CreateRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOpenings200ResponseInnerRole>;

    /**
     * Deletes a role by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApiInterface
     */
    deleteRoleRaw(requestParameters: DeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a role by ID
     */
    deleteRole(requestParameters: DeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Return a role by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApiInterface
     */
    getRoleRaw(requestParameters: GetRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRole200Response>>;

    /**
     * Return a role by ID
     */
    getRole(requestParameters: GetRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRole200Response>;

    /**
     * Returns the current workspace\'s roles
     * @param {Array<object>} [filters] 
     * @param {Array<GetApplicationsSortsParameterInner>} [sorts] 
     * @param {any} [include] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApiInterface
     */
    getRolesRaw(requestParameters: GetRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetRoles200ResponseInner>>>;

    /**
     * Returns the current workspace\'s roles
     */
    getRoles(requestParameters: GetRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetRoles200ResponseInner>>;

    /**
     * Updates a role by ID
     * @param {string} id 
     * @param {UpdateARoleRequest} [updateARoleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApiInterface
     */
    updateARoleRaw(requestParameters: UpdateARoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOpenings200ResponseInnerRole>>;

    /**
     * Updates a role by ID
     */
    updateARole(requestParameters: UpdateARoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOpenings200ResponseInnerRole>;

}

/**
 * 
 */
export class RoleApi extends runtime.BaseAPI implements RoleApiInterface {

    /**
     * Creates a role in the current workspace
     */
    async createRoleRaw(requestParameters: CreateRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOpenings200ResponseInnerRole>> {
        if (requestParameters.createRoleRequest === null || requestParameters.createRoleRequest === undefined) {
            throw new runtime.RequiredError('createRoleRequest','Required parameter requestParameters.createRoleRequest was null or undefined when calling createRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspace/roles/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRoleRequestToJSON(requestParameters.createRoleRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOpenings200ResponseInnerRoleFromJSON(jsonValue));
    }

    /**
     * Creates a role in the current workspace
     */
    async createRole(requestParameters: CreateRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOpenings200ResponseInnerRole> {
        const response = await this.createRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a role by ID
     */
    async deleteRoleRaw(requestParameters: DeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/roles/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a role by ID
     */
    async deleteRole(requestParameters: DeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRoleRaw(requestParameters, initOverrides);
    }

    /**
     * Return a role by ID
     */
    async getRoleRaw(requestParameters: GetRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRole200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/roles/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetRole200ResponseFromJSON(jsonValue));
    }

    /**
     * Return a role by ID
     */
    async getRole(requestParameters: GetRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRole200Response> {
        const response = await this.getRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the current workspace\'s roles
     */
    async getRolesRaw(requestParameters: GetRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetRoles200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters.filters) {
            queryParameters['filters'] = requestParameters.filters;
        }

        if (requestParameters.sorts) {
            queryParameters['sorts'] = requestParameters.sorts;
        }

        if (requestParameters.include !== undefined) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/roles/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetRoles200ResponseInnerFromJSON));
    }

    /**
     * Returns the current workspace\'s roles
     */
    async getRoles(requestParameters: GetRolesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetRoles200ResponseInner>> {
        const response = await this.getRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a role by ID
     */
    async updateARoleRaw(requestParameters: UpdateARoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOpenings200ResponseInnerRole>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateARole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspace/roles/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateARoleRequestToJSON(requestParameters.updateARoleRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOpenings200ResponseInnerRoleFromJSON(jsonValue));
    }

    /**
     * Updates a role by ID
     */
    async updateARole(requestParameters: UpdateARoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOpenings200ResponseInnerRole> {
        const response = await this.updateARoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
