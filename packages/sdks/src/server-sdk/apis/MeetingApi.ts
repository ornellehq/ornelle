/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.15.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  CancelMeeting200Response,
  CreateMeeting201Response,
  CreateMeetingRequest,
  GetMeetings200Response,
  ScheduleMeetingRequest200Response,
  ScheduleMeetingRequestRequest,
  UpdateMeetingRequest,
  WorkspaceMeetingIdPatch200Response,
  WorkspaceMeetingIdPatchRequest,
} from "../models"
import {
  CancelMeeting200ResponseFromJSON,
  CancelMeeting200ResponseToJSON,
  CreateMeeting201ResponseFromJSON,
  CreateMeeting201ResponseToJSON,
  CreateMeetingRequestFromJSON,
  CreateMeetingRequestToJSON,
  GetMeetings200ResponseFromJSON,
  GetMeetings200ResponseToJSON,
  ScheduleMeetingRequest200ResponseFromJSON,
  ScheduleMeetingRequest200ResponseToJSON,
  ScheduleMeetingRequestRequestFromJSON,
  ScheduleMeetingRequestRequestToJSON,
  UpdateMeetingRequestFromJSON,
  UpdateMeetingRequestToJSON,
  WorkspaceMeetingIdPatch200ResponseFromJSON,
  WorkspaceMeetingIdPatch200ResponseToJSON,
  WorkspaceMeetingIdPatchRequestFromJSON,
  WorkspaceMeetingIdPatchRequestToJSON,
} from "../models"
import * as runtime from "../runtime"

export interface CancelMeetingRequest {
  id: string
}

export interface CreateMeetingOperationRequest {
  createMeetingRequest: CreateMeetingRequest
}

export interface GetMeetingRequest {
  id: string
}

export interface GetMeetingsRequest {
  profileId?: string
  applicationId?: string
  status?: GetMeetingsStatusEnum
  startTimeGte?: Date
  startTimeLte?: Date
}

export interface ScheduleMeetingRequestOperationRequest {
  scheduleMeetingRequestRequest: ScheduleMeetingRequestRequest
}

export interface UpdateMeetingOperationRequest {
  id: string
  updateMeetingRequest?: UpdateMeetingRequest
}

export interface WorkspaceMeetingIdPatchOperationRequest {
  id: string
  workspaceMeetingIdPatchRequest: WorkspaceMeetingIdPatchRequest
}

export interface WorkspaceMeetingIdStatusPutRequest {
  id: string
  workspaceMeetingIdPatchRequest: WorkspaceMeetingIdPatchRequest
}

/**
 * MeetingApi - interface
 *
 * @export
 * @interface MeetingApiInterface
 */
export interface MeetingApiInterface {
  /**
   * Cancels an existing meeting
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingApiInterface
   */
  cancelMeetingRaw(
    requestParameters: CancelMeetingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CancelMeeting200Response>>

  /**
   * Cancels an existing meeting
   */
  cancelMeeting(
    requestParameters: CancelMeetingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CancelMeeting200Response>

  /**
   * Creates a new meeting
   * @param {CreateMeetingRequest} createMeetingRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingApiInterface
   */
  createMeetingRaw(
    requestParameters: CreateMeetingOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateMeeting201Response>>

  /**
   * Creates a new meeting
   */
  createMeeting(
    requestParameters: CreateMeetingOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateMeeting201Response>

  /**
   * Gets a single meeting by ID
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingApiInterface
   */
  getMeetingRaw(
    requestParameters: GetMeetingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateMeeting201Response>>

  /**
   * Gets a single meeting by ID
   */
  getMeeting(
    requestParameters: GetMeetingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateMeeting201Response>

  /**
   * Gets meetings with optional filters
   * @param {string} [profileId]
   * @param {string} [applicationId]
   * @param {'Scheduled' | 'Completed' | 'Cancelled'} [status]
   * @param {Date} [startTimeGte]
   * @param {Date} [startTimeLte]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingApiInterface
   */
  getMeetingsRaw(
    requestParameters: GetMeetingsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetMeetings200Response>>

  /**
   * Gets meetings with optional filters
   */
  getMeetings(
    requestParameters: GetMeetingsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetMeetings200Response>

  /**
   * Creates a meeting scheduling request and sends an email to the candidate
   * @param {ScheduleMeetingRequestRequest} scheduleMeetingRequestRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingApiInterface
   */
  scheduleMeetingRequestRaw(
    requestParameters: ScheduleMeetingRequestOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ScheduleMeetingRequest200Response>>

  /**
   * Creates a meeting scheduling request and sends an email to the candidate
   */
  scheduleMeetingRequest(
    requestParameters: ScheduleMeetingRequestOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ScheduleMeetingRequest200Response>

  /**
   * Updates an existing meeting
   * @param {string} id
   * @param {UpdateMeetingRequest} [updateMeetingRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingApiInterface
   */
  updateMeetingRaw(
    requestParameters: UpdateMeetingOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateMeeting201Response>>

  /**
   * Updates an existing meeting
   */
  updateMeeting(
    requestParameters: UpdateMeetingOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateMeeting201Response>

  /**
   * Update meeting status and send workflow signal if applicable
   * @param {string} id
   * @param {WorkspaceMeetingIdPatchRequest} workspaceMeetingIdPatchRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingApiInterface
   */
  workspaceMeetingIdPatchRaw(
    requestParameters: WorkspaceMeetingIdPatchOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<WorkspaceMeetingIdPatch200Response>>

  /**
   * Update meeting status and send workflow signal if applicable
   */
  workspaceMeetingIdPatch(
    requestParameters: WorkspaceMeetingIdPatchOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<WorkspaceMeetingIdPatch200Response>

  /**
   * Update meeting status and send workflow signal if applicable
   * @param {string} id
   * @param {WorkspaceMeetingIdPatchRequest} workspaceMeetingIdPatchRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingApiInterface
   */
  workspaceMeetingIdStatusPutRaw(
    requestParameters: WorkspaceMeetingIdStatusPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<WorkspaceMeetingIdPatch200Response>>

  /**
   * Update meeting status and send workflow signal if applicable
   */
  workspaceMeetingIdStatusPut(
    requestParameters: WorkspaceMeetingIdStatusPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<WorkspaceMeetingIdPatch200Response>
}

/**
 *
 */
export class MeetingApi extends runtime.BaseAPI implements MeetingApiInterface {
  /**
   * Cancels an existing meeting
   */
  async cancelMeetingRaw(
    requestParameters: CancelMeetingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CancelMeeting200Response>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling cancelMeeting.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization") // permissions authentication
    }

    const response = await this.request(
      {
        path: `/workspace/meetings/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CancelMeeting200ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Cancels an existing meeting
   */
  async cancelMeeting(
    requestParameters: CancelMeetingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CancelMeeting200Response> {
    const response = await this.cancelMeetingRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Creates a new meeting
   */
  async createMeetingRaw(
    requestParameters: CreateMeetingOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateMeeting201Response>> {
    if (
      requestParameters.createMeetingRequest === null ||
      requestParameters.createMeetingRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "createMeetingRequest",
        "Required parameter requestParameters.createMeetingRequest was null or undefined when calling createMeeting.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization") // permissions authentication
    }

    const response = await this.request(
      {
        path: `/workspace/meetings`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateMeetingRequestToJSON(
          requestParameters.createMeetingRequest,
        ),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateMeeting201ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Creates a new meeting
   */
  async createMeeting(
    requestParameters: CreateMeetingOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateMeeting201Response> {
    const response = await this.createMeetingRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Gets a single meeting by ID
   */
  async getMeetingRaw(
    requestParameters: GetMeetingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateMeeting201Response>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling getMeeting.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization") // permissions authentication
    }

    const response = await this.request(
      {
        path: `/workspace/meetings/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateMeeting201ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Gets a single meeting by ID
   */
  async getMeeting(
    requestParameters: GetMeetingRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateMeeting201Response> {
    const response = await this.getMeetingRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Gets meetings with optional filters
   */
  async getMeetingsRaw(
    requestParameters: GetMeetingsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetMeetings200Response>> {
    const queryParameters: any = {}

    if (requestParameters.profileId !== undefined) {
      queryParameters["profileId"] = requestParameters.profileId
    }

    if (requestParameters.applicationId !== undefined) {
      queryParameters["applicationId"] = requestParameters.applicationId
    }

    if (requestParameters.status !== undefined) {
      queryParameters["status"] = requestParameters.status
    }

    if (requestParameters.startTimeGte !== undefined) {
      queryParameters["startTimeGte"] = (
        requestParameters.startTimeGte as any
      ).toISOString()
    }

    if (requestParameters.startTimeLte !== undefined) {
      queryParameters["startTimeLte"] = (
        requestParameters.startTimeLte as any
      ).toISOString()
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization") // permissions authentication
    }

    const response = await this.request(
      {
        path: `/workspace/meetings`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetMeetings200ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Gets meetings with optional filters
   */
  async getMeetings(
    requestParameters: GetMeetingsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetMeetings200Response> {
    const response = await this.getMeetingsRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Creates a meeting scheduling request and sends an email to the candidate
   */
  async scheduleMeetingRequestRaw(
    requestParameters: ScheduleMeetingRequestOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ScheduleMeetingRequest200Response>> {
    if (
      requestParameters.scheduleMeetingRequestRequest === null ||
      requestParameters.scheduleMeetingRequestRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "scheduleMeetingRequestRequest",
        "Required parameter requestParameters.scheduleMeetingRequestRequest was null or undefined when calling scheduleMeetingRequest.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization") // permissions authentication
    }

    const response = await this.request(
      {
        path: `/workspace/meetings/schedule-request/`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ScheduleMeetingRequestRequestToJSON(
          requestParameters.scheduleMeetingRequestRequest,
        ),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ScheduleMeetingRequest200ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Creates a meeting scheduling request and sends an email to the candidate
   */
  async scheduleMeetingRequest(
    requestParameters: ScheduleMeetingRequestOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ScheduleMeetingRequest200Response> {
    const response = await this.scheduleMeetingRequestRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Updates an existing meeting
   */
  async updateMeetingRaw(
    requestParameters: UpdateMeetingOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateMeeting201Response>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling updateMeeting.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization") // permissions authentication
    }

    const response = await this.request(
      {
        path: `/workspace/meetings/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateMeetingRequestToJSON(
          requestParameters.updateMeetingRequest,
        ),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateMeeting201ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Updates an existing meeting
   */
  async updateMeeting(
    requestParameters: UpdateMeetingOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateMeeting201Response> {
    const response = await this.updateMeetingRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Update meeting status and send workflow signal if applicable
   */
  async workspaceMeetingIdPatchRaw(
    requestParameters: WorkspaceMeetingIdPatchOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<WorkspaceMeetingIdPatch200Response>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling workspaceMeetingIdPatch.",
      )
    }

    if (
      requestParameters.workspaceMeetingIdPatchRequest === null ||
      requestParameters.workspaceMeetingIdPatchRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "workspaceMeetingIdPatchRequest",
        "Required parameter requestParameters.workspaceMeetingIdPatchRequest was null or undefined when calling workspaceMeetingIdPatch.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/workspace/meeting/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: WorkspaceMeetingIdPatchRequestToJSON(
          requestParameters.workspaceMeetingIdPatchRequest,
        ),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      WorkspaceMeetingIdPatch200ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Update meeting status and send workflow signal if applicable
   */
  async workspaceMeetingIdPatch(
    requestParameters: WorkspaceMeetingIdPatchOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<WorkspaceMeetingIdPatch200Response> {
    const response = await this.workspaceMeetingIdPatchRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Update meeting status and send workflow signal if applicable
   */
  async workspaceMeetingIdStatusPutRaw(
    requestParameters: WorkspaceMeetingIdStatusPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<WorkspaceMeetingIdPatch200Response>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling workspaceMeetingIdStatusPut.",
      )
    }

    if (
      requestParameters.workspaceMeetingIdPatchRequest === null ||
      requestParameters.workspaceMeetingIdPatchRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "workspaceMeetingIdPatchRequest",
        "Required parameter requestParameters.workspaceMeetingIdPatchRequest was null or undefined when calling workspaceMeetingIdStatusPut.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/workspace/meeting/{id}/status`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: WorkspaceMeetingIdPatchRequestToJSON(
          requestParameters.workspaceMeetingIdPatchRequest,
        ),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      WorkspaceMeetingIdPatch200ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Update meeting status and send workflow signal if applicable
   */
  async workspaceMeetingIdStatusPut(
    requestParameters: WorkspaceMeetingIdStatusPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<WorkspaceMeetingIdPatch200Response> {
    const response = await this.workspaceMeetingIdStatusPutRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }
}

/**
 * @export
 * @enum {string}
 */
export enum GetMeetingsStatusEnum {
  Scheduled = "Scheduled",
  Completed = "Completed",
  Cancelled = "Cancelled",
}
