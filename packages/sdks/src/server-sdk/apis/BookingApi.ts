/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.15.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  BookAMeeting201Response,
  BookAMeetingRequest,
  GetBookingDetails200Response,
  GetBookingDetails404Response,
} from "../models"
import {
  BookAMeeting201ResponseFromJSON,
  BookAMeeting201ResponseToJSON,
  BookAMeetingRequestFromJSON,
  BookAMeetingRequestToJSON,
  GetBookingDetails200ResponseFromJSON,
  GetBookingDetails200ResponseToJSON,
  GetBookingDetails404ResponseFromJSON,
  GetBookingDetails404ResponseToJSON,
} from "../models"
import * as runtime from "../runtime"

export interface BookAMeetingOperationRequest {
  id: string
  bookAMeetingRequest: BookAMeetingRequest
}

export interface GetBookingDetailsRequest {
  id: string
  url: string
}

/**
 * BookingApi - interface
 *
 * @export
 * @interface BookingApiInterface
 */
export interface BookingApiInterface {
  /**
   * Books a meeting time slot for a candidate
   * @param {string} id
   * @param {BookAMeetingRequest} bookAMeetingRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BookingApiInterface
   */
  bookAMeetingRaw(
    requestParameters: BookAMeetingOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<BookAMeeting201Response>>

  /**
   * Books a meeting time slot for a candidate
   */
  bookAMeeting(
    requestParameters: BookAMeetingOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<BookAMeeting201Response>

  /**
   *
   * @param {string} id
   * @param {string} url
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BookingApiInterface
   */
  getBookingDetailsRaw(
    requestParameters: GetBookingDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetBookingDetails200Response>>

  /**
   */
  getBookingDetails(
    requestParameters: GetBookingDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetBookingDetails200Response>
}

/**
 *
 */
export class BookingApi extends runtime.BaseAPI implements BookingApiInterface {
  /**
   * Books a meeting time slot for a candidate
   */
  async bookAMeetingRaw(
    requestParameters: BookAMeetingOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<BookAMeeting201Response>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling bookAMeeting.",
      )
    }

    if (
      requestParameters.bookAMeetingRequest === null ||
      requestParameters.bookAMeetingRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "bookAMeetingRequest",
        "Required parameter requestParameters.bookAMeetingRequest was null or undefined when calling bookAMeeting.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/workspaces/{url}/meetings/book/{id}/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: BookAMeetingRequestToJSON(requestParameters.bookAMeetingRequest),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      BookAMeeting201ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Books a meeting time slot for a candidate
   */
  async bookAMeeting(
    requestParameters: BookAMeetingOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<BookAMeeting201Response> {
    const response = await this.bookAMeetingRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   */
  async getBookingDetailsRaw(
    requestParameters: GetBookingDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetBookingDetails200Response>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling getBookingDetails.",
      )
    }

    if (requestParameters.url === null || requestParameters.url === undefined) {
      throw new runtime.RequiredError(
        "url",
        "Required parameter requestParameters.url was null or undefined when calling getBookingDetails.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/workspaces/{url}/meetings/book/{id}/`
          .replace(
            `{${"id"}}`,
            encodeURIComponent(String(requestParameters.id)),
          )
          .replace(
            `{${"url"}}`,
            encodeURIComponent(String(requestParameters.url)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetBookingDetails200ResponseFromJSON(jsonValue),
    )
  }

  /**
   */
  async getBookingDetails(
    requestParameters: GetBookingDetailsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetBookingDetails200Response> {
    const response = await this.getBookingDetailsRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }
}
