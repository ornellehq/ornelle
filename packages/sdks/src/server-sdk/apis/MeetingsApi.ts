/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.15.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { GetAvailableMeetingSlots200Response } from "../models"
import {
  GetAvailableMeetingSlots200ResponseFromJSON,
  GetAvailableMeetingSlots200ResponseToJSON,
} from "../models"
import * as runtime from "../runtime"

export interface GetAvailableMeetingSlotsRequest {
  profileId: string
  url: string
  applicationId?: string
  startDate?: Date
  endDate?: Date
  duration?: number
  signature?: string
}

/**
 * MeetingsApi - interface
 *
 * @export
 * @interface MeetingsApiInterface
 */
export interface MeetingsApiInterface {
  /**
   * Retrieves available meeting time slots for scheduling
   * @param {string} profileId
   * @param {string} url
   * @param {string} [applicationId]
   * @param {Date} [startDate]
   * @param {Date} [endDate]
   * @param {number} [duration]
   * @param {string} [signature]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingsApiInterface
   */
  getAvailableMeetingSlotsRaw(
    requestParameters: GetAvailableMeetingSlotsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetAvailableMeetingSlots200Response>>

  /**
   * Retrieves available meeting time slots for scheduling
   */
  getAvailableMeetingSlots(
    requestParameters: GetAvailableMeetingSlotsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetAvailableMeetingSlots200Response>
}

/**
 *
 */
export class MeetingsApi
  extends runtime.BaseAPI
  implements MeetingsApiInterface
{
  /**
   * Retrieves available meeting time slots for scheduling
   */
  async getAvailableMeetingSlotsRaw(
    requestParameters: GetAvailableMeetingSlotsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetAvailableMeetingSlots200Response>> {
    if (
      requestParameters.profileId === null ||
      requestParameters.profileId === undefined
    ) {
      throw new runtime.RequiredError(
        "profileId",
        "Required parameter requestParameters.profileId was null or undefined when calling getAvailableMeetingSlots.",
      )
    }

    if (requestParameters.url === null || requestParameters.url === undefined) {
      throw new runtime.RequiredError(
        "url",
        "Required parameter requestParameters.url was null or undefined when calling getAvailableMeetingSlots.",
      )
    }

    const queryParameters: any = {}

    if (requestParameters.profileId !== undefined) {
      queryParameters["profileId"] = requestParameters.profileId
    }

    if (requestParameters.applicationId !== undefined) {
      queryParameters["applicationId"] = requestParameters.applicationId
    }

    if (requestParameters.startDate !== undefined) {
      queryParameters["startDate"] = (
        requestParameters.startDate as any
      ).toISOString()
    }

    if (requestParameters.endDate !== undefined) {
      queryParameters["endDate"] = (
        requestParameters.endDate as any
      ).toISOString()
    }

    if (requestParameters.duration !== undefined) {
      queryParameters["duration"] = requestParameters.duration
    }

    if (requestParameters.signature !== undefined) {
      queryParameters["signature"] = requestParameters.signature
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/workspaces/{url}/meetings/available-slots/`.replace(
          `{${"url"}}`,
          encodeURIComponent(String(requestParameters.url)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetAvailableMeetingSlots200ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Retrieves available meeting time slots for scheduling
   */
  async getAvailableMeetingSlots(
    requestParameters: GetAvailableMeetingSlotsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetAvailableMeetingSlots200Response> {
    const response = await this.getAvailableMeetingSlotsRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }
}
