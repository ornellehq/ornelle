/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.15.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  CreateWorkflow200Response,
  CreateWorkflowRequest,
  DeleteWorkflow400Response,
  GetRunStep200Response,
  GetSteps200ResponseInner,
  GetWorkflow200Response,
  GetWorkflowRun200Response,
  GetWorkflowRun200ResponseStepsInner,
  GetWorkflows200ResponseInner,
  UpdateWorkflowRequest,
  UpdateWorkflowRunStepRequest,
} from "../models"
import {
  CreateWorkflow200ResponseFromJSON,
  CreateWorkflow200ResponseToJSON,
  CreateWorkflowRequestFromJSON,
  CreateWorkflowRequestToJSON,
  DeleteWorkflow400ResponseFromJSON,
  DeleteWorkflow400ResponseToJSON,
  GetRunStep200ResponseFromJSON,
  GetRunStep200ResponseToJSON,
  GetSteps200ResponseInnerFromJSON,
  GetSteps200ResponseInnerToJSON,
  GetWorkflow200ResponseFromJSON,
  GetWorkflow200ResponseToJSON,
  GetWorkflowRun200ResponseFromJSON,
  GetWorkflowRun200ResponseStepsInnerFromJSON,
  GetWorkflowRun200ResponseStepsInnerToJSON,
  GetWorkflowRun200ResponseToJSON,
  GetWorkflows200ResponseInnerFromJSON,
  GetWorkflows200ResponseInnerToJSON,
  UpdateWorkflowRequestFromJSON,
  UpdateWorkflowRequestToJSON,
  UpdateWorkflowRunStepRequestFromJSON,
  UpdateWorkflowRunStepRequestToJSON,
} from "../models"
import * as runtime from "../runtime"

export interface CreateWorkflowOperationRequest {
  createWorkflowRequest: CreateWorkflowRequest
}

export interface DeleteWorkflowRequest {
  id: string
}

export interface GetRunStepRequest {
  id: string
  manualReviewApproval?: boolean
}

export interface GetStepsRequest {
  manualReviewApproval?: boolean
}

export interface GetWorkflowRequest {
  id: string
}

export interface GetWorkflowRunRequest {
  triggerId: string
  triggerType: GetWorkflowRunTriggerTypeEnum
}

export interface GetWorkflowsRequest {
  includeArchived?: boolean
}

export interface UpdateWorkflowOperationRequest {
  id: string
  updateWorkflowRequest?: UpdateWorkflowRequest
}

export interface UpdateWorkflowRunStepOperationRequest {
  id: string
  updateWorkflowRunStepRequest?: UpdateWorkflowRunStepRequest
}

/**
 * WorkflowApi - interface
 *
 * @export
 * @interface WorkflowApiInterface
 */
export interface WorkflowApiInterface {
  /**
   * Creates a workflow in the current workspace
   * @param {CreateWorkflowRequest} createWorkflowRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkflowApiInterface
   */
  createWorkflowRaw(
    requestParameters: CreateWorkflowOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateWorkflow200Response>>

  /**
   * Creates a workflow in the current workspace
   */
  createWorkflow(
    requestParameters: CreateWorkflowOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateWorkflow200Response>

  /**
   * Deletes a workflow if it is not used by any openings
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkflowApiInterface
   */
  deleteWorkflowRaw(
    requestParameters: DeleteWorkflowRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>

  /**
   * Deletes a workflow if it is not used by any openings
   */
  deleteWorkflow(
    requestParameters: DeleteWorkflowRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void>

  /**
   * Returns workflow run step by id
   * @param {string} id
   * @param {boolean} [manualReviewApproval]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkflowApiInterface
   */
  getRunStepRaw(
    requestParameters: GetRunStepRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetRunStep200Response>>

  /**
   * Returns workflow run step by id
   */
  getRunStep(
    requestParameters: GetRunStepRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetRunStep200Response>

  /**
   * Returns workflow steps within the current workspace
   * @param {boolean} [manualReviewApproval]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkflowApiInterface
   */
  getStepsRaw(
    requestParameters: GetStepsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GetSteps200ResponseInner>>>

  /**
   * Returns workflow steps within the current workspace
   */
  getSteps(
    requestParameters: GetStepsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GetSteps200ResponseInner>>

  /**
   * Return a workflow by ID
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkflowApiInterface
   */
  getWorkflowRaw(
    requestParameters: GetWorkflowRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetWorkflow200Response>>

  /**
   * Return a workflow by ID
   */
  getWorkflow(
    requestParameters: GetWorkflowRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetWorkflow200Response>

  /**
   * Returns workflow run data for a specific entity
   * @param {string} triggerId The ID of the entity to fetch workflow run for (e.g., applicationId)
   * @param {'ApplicationCreated'} triggerType The type of entity (e.g., Application)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkflowApiInterface
   */
  getWorkflowRunRaw(
    requestParameters: GetWorkflowRunRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetWorkflowRun200Response>>

  /**
   * Returns workflow run data for a specific entity
   */
  getWorkflowRun(
    requestParameters: GetWorkflowRunRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetWorkflowRun200Response>

  /**
   * Get workflows for the current workspace
   * @param {boolean} [includeArchived]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkflowApiInterface
   */
  getWorkflowsRaw(
    requestParameters: GetWorkflowsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GetWorkflows200ResponseInner>>>

  /**
   * Get workflows for the current workspace
   */
  getWorkflows(
    requestParameters: GetWorkflowsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GetWorkflows200ResponseInner>>

  /**
   * Updates a workflow in the current workspace
   * @param {string} id
   * @param {UpdateWorkflowRequest} [updateWorkflowRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkflowApiInterface
   */
  updateWorkflowRaw(
    requestParameters: UpdateWorkflowOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateWorkflow200Response>>

  /**
   * Updates a workflow in the current workspace
   */
  updateWorkflow(
    requestParameters: UpdateWorkflowOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateWorkflow200Response>

  /**
   * Updates a workflow run step in the current workspace
   * @param {string} id
   * @param {UpdateWorkflowRunStepRequest} [updateWorkflowRunStepRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WorkflowApiInterface
   */
  updateWorkflowRunStepRaw(
    requestParameters: UpdateWorkflowRunStepOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetWorkflowRun200ResponseStepsInner>>

  /**
   * Updates a workflow run step in the current workspace
   */
  updateWorkflowRunStep(
    requestParameters: UpdateWorkflowRunStepOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetWorkflowRun200ResponseStepsInner>
}

/**
 *
 */
export class WorkflowApi
  extends runtime.BaseAPI
  implements WorkflowApiInterface
{
  /**
   * Creates a workflow in the current workspace
   */
  async createWorkflowRaw(
    requestParameters: CreateWorkflowOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateWorkflow200Response>> {
    if (
      requestParameters.createWorkflowRequest === null ||
      requestParameters.createWorkflowRequest === undefined
    ) {
      throw new runtime.RequiredError(
        "createWorkflowRequest",
        "Required parameter requestParameters.createWorkflowRequest was null or undefined when calling createWorkflow.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization") // permissions authentication
    }

    const response = await this.request(
      {
        path: `/workspace/workflows/`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateWorkflowRequestToJSON(
          requestParameters.createWorkflowRequest,
        ),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateWorkflow200ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Creates a workflow in the current workspace
   */
  async createWorkflow(
    requestParameters: CreateWorkflowOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateWorkflow200Response> {
    const response = await this.createWorkflowRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Deletes a workflow if it is not used by any openings
   */
  async deleteWorkflowRaw(
    requestParameters: DeleteWorkflowRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling deleteWorkflow.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization") // permissions authentication
    }

    const response = await this.request(
      {
        path: `/workspace/workflows/{id}/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Deletes a workflow if it is not used by any openings
   */
  async deleteWorkflow(
    requestParameters: DeleteWorkflowRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteWorkflowRaw(requestParameters, initOverrides)
  }

  /**
   * Returns workflow run step by id
   */
  async getRunStepRaw(
    requestParameters: GetRunStepRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetRunStep200Response>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling getRunStep.",
      )
    }

    const queryParameters: any = {}

    if (requestParameters.manualReviewApproval !== undefined) {
      queryParameters["manualReviewApproval"] =
        requestParameters.manualReviewApproval
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/workspace/workflow-run-steps/{id}/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetRunStep200ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Returns workflow run step by id
   */
  async getRunStep(
    requestParameters: GetRunStepRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetRunStep200Response> {
    const response = await this.getRunStepRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Returns workflow steps within the current workspace
   */
  async getStepsRaw(
    requestParameters: GetStepsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GetSteps200ResponseInner>>> {
    const queryParameters: any = {}

    if (requestParameters.manualReviewApproval !== undefined) {
      queryParameters["manualReviewApproval"] =
        requestParameters.manualReviewApproval
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/workspace/workflow-run-steps/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(GetSteps200ResponseInnerFromJSON),
    )
  }

  /**
   * Returns workflow steps within the current workspace
   */
  async getSteps(
    requestParameters: GetStepsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GetSteps200ResponseInner>> {
    const response = await this.getStepsRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Return a workflow by ID
   */
  async getWorkflowRaw(
    requestParameters: GetWorkflowRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetWorkflow200Response>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling getWorkflow.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization") // permissions authentication
    }

    const response = await this.request(
      {
        path: `/workspace/workflows/{id}/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetWorkflow200ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Return a workflow by ID
   */
  async getWorkflow(
    requestParameters: GetWorkflowRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetWorkflow200Response> {
    const response = await this.getWorkflowRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Returns workflow run data for a specific entity
   */
  async getWorkflowRunRaw(
    requestParameters: GetWorkflowRunRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetWorkflowRun200Response>> {
    if (
      requestParameters.triggerId === null ||
      requestParameters.triggerId === undefined
    ) {
      throw new runtime.RequiredError(
        "triggerId",
        "Required parameter requestParameters.triggerId was null or undefined when calling getWorkflowRun.",
      )
    }

    if (
      requestParameters.triggerType === null ||
      requestParameters.triggerType === undefined
    ) {
      throw new runtime.RequiredError(
        "triggerType",
        "Required parameter requestParameters.triggerType was null or undefined when calling getWorkflowRun.",
      )
    }

    const queryParameters: any = {}

    if (requestParameters.triggerId !== undefined) {
      queryParameters["triggerId"] = requestParameters.triggerId
    }

    if (requestParameters.triggerType !== undefined) {
      queryParameters["triggerType"] = requestParameters.triggerType
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization") // permissions authentication
    }

    const response = await this.request(
      {
        path: `/workspace/workflow-run/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetWorkflowRun200ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Returns workflow run data for a specific entity
   */
  async getWorkflowRun(
    requestParameters: GetWorkflowRunRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetWorkflowRun200Response> {
    const response = await this.getWorkflowRunRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Get workflows for the current workspace
   */
  async getWorkflowsRaw(
    requestParameters: GetWorkflowsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GetWorkflows200ResponseInner>>> {
    const queryParameters: any = {}

    if (requestParameters.includeArchived !== undefined) {
      queryParameters["includeArchived"] = requestParameters.includeArchived
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization") // permissions authentication
    }

    const response = await this.request(
      {
        path: `/workspace/workflows/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(GetWorkflows200ResponseInnerFromJSON),
    )
  }

  /**
   * Get workflows for the current workspace
   */
  async getWorkflows(
    requestParameters: GetWorkflowsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GetWorkflows200ResponseInner>> {
    const response = await this.getWorkflowsRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Updates a workflow in the current workspace
   */
  async updateWorkflowRaw(
    requestParameters: UpdateWorkflowOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateWorkflow200Response>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling updateWorkflow.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization") // permissions authentication
    }

    const response = await this.request(
      {
        path: `/workspace/workflows/{id}/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateWorkflowRequestToJSON(
          requestParameters.updateWorkflowRequest,
        ),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateWorkflow200ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Updates a workflow in the current workspace
   */
  async updateWorkflow(
    requestParameters: UpdateWorkflowOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateWorkflow200Response> {
    const response = await this.updateWorkflowRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Updates a workflow run step in the current workspace
   */
  async updateWorkflowRunStepRaw(
    requestParameters: UpdateWorkflowRunStepOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetWorkflowRun200ResponseStepsInner>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling updateWorkflowRunStep.",
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters["Content-Type"] = "application/json"

    const response = await this.request(
      {
        path: `/workspace/workflow-run-steps/{id}/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateWorkflowRunStepRequestToJSON(
          requestParameters.updateWorkflowRunStepRequest,
        ),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetWorkflowRun200ResponseStepsInnerFromJSON(jsonValue),
    )
  }

  /**
   * Updates a workflow run step in the current workspace
   */
  async updateWorkflowRunStep(
    requestParameters: UpdateWorkflowRunStepOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetWorkflowRun200ResponseStepsInner> {
    const response = await this.updateWorkflowRunStepRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }
}

/**
 * @export
 * @enum {string}
 */
export enum GetWorkflowRunTriggerTypeEnum {
  ApplicationCreated = "ApplicationCreated",
}
