/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateApplication200Response,
  CreateApplicationRequest,
  CreateMessageRequest1,
  CreateReviewRequest,
  GetApplications200ResponseInner,
  GetApplicationsSortsParameterInner,
  GetMessages200ResponseInner,
  UpdateApplicationRequest,
  UpdateReview200Response,
} from '../models';
import {
    CreateApplication200ResponseFromJSON,
    CreateApplication200ResponseToJSON,
    CreateApplicationRequestFromJSON,
    CreateApplicationRequestToJSON,
    CreateMessageRequest1FromJSON,
    CreateMessageRequest1ToJSON,
    CreateReviewRequestFromJSON,
    CreateReviewRequestToJSON,
    GetApplications200ResponseInnerFromJSON,
    GetApplications200ResponseInnerToJSON,
    GetApplicationsSortsParameterInnerFromJSON,
    GetApplicationsSortsParameterInnerToJSON,
    GetMessages200ResponseInnerFromJSON,
    GetMessages200ResponseInnerToJSON,
    UpdateApplicationRequestFromJSON,
    UpdateApplicationRequestToJSON,
    UpdateReview200ResponseFromJSON,
    UpdateReview200ResponseToJSON,
} from '../models';

export interface CreateApplicationOperationRequest {
    createApplicationRequest: CreateApplicationRequest;
}

export interface CreateMessageRequest {
    id: string;
    createMessageRequest1: CreateMessageRequest1;
}

export interface CreateReviewOperationRequest {
    id: string;
    createReviewRequest: CreateReviewRequest;
}

export interface GetApplicationRequest {
    id: string;
}

export interface GetApplicationsRequest {
    filters?: Array<object>;
    sorts?: Array<GetApplicationsSortsParameterInner>;
    include?: any;
}

export interface UpdateApplicationOperationRequest {
    id: string;
    updateApplicationRequest?: UpdateApplicationRequest;
}

/**
 * ApplicationApi - interface
 * 
 * @export
 * @interface ApplicationApiInterface
 */
export interface ApplicationApiInterface {
    /**
     * Creates an application in the current workspace
     * @param {CreateApplicationRequest} createApplicationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApiInterface
     */
    createApplicationRaw(requestParameters: CreateApplicationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateApplication200Response>>;

    /**
     * Creates an application in the current workspace
     */
    createApplication(requestParameters: CreateApplicationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateApplication200Response>;

    /**
     * Sends a message internally or to a candidate
     * @param {string} id 
     * @param {CreateMessageRequest1} createMessageRequest1 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApiInterface
     */
    createMessageRaw(requestParameters: CreateMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMessages200ResponseInner>>;

    /**
     * Sends a message internally or to a candidate
     */
    createMessage(requestParameters: CreateMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMessages200ResponseInner>;

    /**
     * Creates a review for an application
     * @param {string} id 
     * @param {CreateReviewRequest} createReviewRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApiInterface
     */
    createReviewRaw(requestParameters: CreateReviewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateReview200Response>>;

    /**
     * Creates a review for an application
     */
    createReview(requestParameters: CreateReviewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateReview200Response>;

    /**
     * Returns an application in the current workspace with next and previous application IDs
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApiInterface
     */
    getApplicationRaw(requestParameters: GetApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateApplication200Response>>;

    /**
     * Returns an application in the current workspace with next and previous application IDs
     */
    getApplication(requestParameters: GetApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateApplication200Response>;

    /**
     * Returns the current workspace\'s applications
     * @param {Array<object>} [filters] 
     * @param {Array<GetApplicationsSortsParameterInner>} [sorts] 
     * @param {any} [include] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApiInterface
     */
    getApplicationsRaw(requestParameters: GetApplicationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetApplications200ResponseInner>>>;

    /**
     * Returns the current workspace\'s applications
     */
    getApplications(requestParameters: GetApplicationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetApplications200ResponseInner>>;

    /**
     * Updates an application by id
     * @param {string} id 
     * @param {UpdateApplicationRequest} [updateApplicationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApiInterface
     */
    updateApplicationRaw(requestParameters: UpdateApplicationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateApplication200Response>>;

    /**
     * Updates an application by id
     */
    updateApplication(requestParameters: UpdateApplicationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateApplication200Response>;

}

/**
 * 
 */
export class ApplicationApi extends runtime.BaseAPI implements ApplicationApiInterface {

    /**
     * Creates an application in the current workspace
     */
    async createApplicationRaw(requestParameters: CreateApplicationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateApplication200Response>> {
        if (requestParameters.createApplicationRequest === null || requestParameters.createApplicationRequest === undefined) {
            throw new runtime.RequiredError('createApplicationRequest','Required parameter requestParameters.createApplicationRequest was null or undefined when calling createApplication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspace/applications/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateApplicationRequestToJSON(requestParameters.createApplicationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateApplication200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates an application in the current workspace
     */
    async createApplication(requestParameters: CreateApplicationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateApplication200Response> {
        const response = await this.createApplicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sends a message internally or to a candidate
     */
    async createMessageRaw(requestParameters: CreateMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMessages200ResponseInner>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling createMessage.');
        }

        if (requestParameters.createMessageRequest1 === null || requestParameters.createMessageRequest1 === undefined) {
            throw new runtime.RequiredError('createMessageRequest1','Required parameter requestParameters.createMessageRequest1 was null or undefined when calling createMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspace/applications/{id}/messages/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMessageRequest1ToJSON(requestParameters.createMessageRequest1),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMessages200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Sends a message internally or to a candidate
     */
    async createMessage(requestParameters: CreateMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMessages200ResponseInner> {
        const response = await this.createMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a review for an application
     */
    async createReviewRaw(requestParameters: CreateReviewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateReview200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling createReview.');
        }

        if (requestParameters.createReviewRequest === null || requestParameters.createReviewRequest === undefined) {
            throw new runtime.RequiredError('createReviewRequest','Required parameter requestParameters.createReviewRequest was null or undefined when calling createReview.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspace/applications/{id}/reviews/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateReviewRequestToJSON(requestParameters.createReviewRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateReview200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a review for an application
     */
    async createReview(requestParameters: CreateReviewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateReview200Response> {
        const response = await this.createReviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns an application in the current workspace with next and previous application IDs
     */
    async getApplicationRaw(requestParameters: GetApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateApplication200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getApplication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/applications/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateApplication200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns an application in the current workspace with next and previous application IDs
     */
    async getApplication(requestParameters: GetApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateApplication200Response> {
        const response = await this.getApplicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the current workspace\'s applications
     */
    async getApplicationsRaw(requestParameters: GetApplicationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetApplications200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters.filters) {
            queryParameters['filters'] = requestParameters.filters;
        }

        if (requestParameters.sorts) {
            queryParameters['sorts'] = requestParameters.sorts;
        }

        if (requestParameters.include !== undefined) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/applications/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetApplications200ResponseInnerFromJSON));
    }

    /**
     * Returns the current workspace\'s applications
     */
    async getApplications(requestParameters: GetApplicationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetApplications200ResponseInner>> {
        const response = await this.getApplicationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an application by id
     */
    async updateApplicationRaw(requestParameters: UpdateApplicationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateApplication200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateApplication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspace/applications/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApplicationRequestToJSON(requestParameters.updateApplicationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateApplication200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates an application by id
     */
    async updateApplication(requestParameters: UpdateApplicationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateApplication200Response> {
        const response = await this.updateApplicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
