/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.15.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime"

export interface ConnectGoogleCalendarRequest {
  redirect: string
  url: string
}

export interface ConnectMicrosoftCalendarRequest {
  redirect: string
  url: string
}

export interface ConnectZoomRequest {
  redirect: string
  url: string
}

export interface HandleGoogleCalendarOAuthCallbackRequest {
  url: string
  code?: string
  state?: string
  error?: string
}

export interface HandleMicrosoftCalendarOAuthCallbackRequest {
  url: string
  code?: string
  state?: string
  error?: string
}

export interface HandleZoomOAuthCallbackRequest {
  url: string
  code?: string
  state?: string
  error?: string
}

/**
 * OAuthApi - interface
 *
 * @export
 * @interface OAuthApiInterface
 */
export interface OAuthApiInterface {
  /**
   * Initiate Google Calendar OAuth flow
   * @param {string} redirect URL to redirect to after authentication
   * @param {string} url Workspace URL
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OAuthApiInterface
   */
  connectGoogleCalendarRaw(
    requestParameters: ConnectGoogleCalendarRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>

  /**
   * Initiate Google Calendar OAuth flow
   */
  connectGoogleCalendar(
    requestParameters: ConnectGoogleCalendarRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void>

  /**
   * Initiate Microsoft Calendar OAuth flow
   * @param {string} redirect URL to redirect to after authentication
   * @param {string} url Workspace URL
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OAuthApiInterface
   */
  connectMicrosoftCalendarRaw(
    requestParameters: ConnectMicrosoftCalendarRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>

  /**
   * Initiate Microsoft Calendar OAuth flow
   */
  connectMicrosoftCalendar(
    requestParameters: ConnectMicrosoftCalendarRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void>

  /**
   * Initiate Zoom OAuth flow
   * @param {string} redirect URL to redirect to after authentication
   * @param {string} url Workspace URL
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OAuthApiInterface
   */
  connectZoomRaw(
    requestParameters: ConnectZoomRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>

  /**
   * Initiate Zoom OAuth flow
   */
  connectZoom(
    requestParameters: ConnectZoomRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void>

  /**
   * Handle Google Calendar OAuth callback
   * @param {string} url Workspace URL
   * @param {string} [code]
   * @param {string} [state]
   * @param {string} [error]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OAuthApiInterface
   */
  handleGoogleCalendarOAuthCallbackRaw(
    requestParameters: HandleGoogleCalendarOAuthCallbackRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>

  /**
   * Handle Google Calendar OAuth callback
   */
  handleGoogleCalendarOAuthCallback(
    requestParameters: HandleGoogleCalendarOAuthCallbackRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void>

  /**
   * Handle Microsoft Calendar OAuth callback
   * @param {string} url Workspace URL
   * @param {string} [code]
   * @param {string} [state]
   * @param {string} [error]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OAuthApiInterface
   */
  handleMicrosoftCalendarOAuthCallbackRaw(
    requestParameters: HandleMicrosoftCalendarOAuthCallbackRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>

  /**
   * Handle Microsoft Calendar OAuth callback
   */
  handleMicrosoftCalendarOAuthCallback(
    requestParameters: HandleMicrosoftCalendarOAuthCallbackRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void>

  /**
   * Handle Zoom OAuth callback
   * @param {string} url Workspace URL
   * @param {string} [code]
   * @param {string} [state]
   * @param {string} [error]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OAuthApiInterface
   */
  handleZoomOAuthCallbackRaw(
    requestParameters: HandleZoomOAuthCallbackRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>>

  /**
   * Handle Zoom OAuth callback
   */
  handleZoomOAuthCallback(
    requestParameters: HandleZoomOAuthCallbackRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void>
}

/**
 *
 */
export class OAuthApi extends runtime.BaseAPI implements OAuthApiInterface {
  /**
   * Initiate Google Calendar OAuth flow
   */
  async connectGoogleCalendarRaw(
    requestParameters: ConnectGoogleCalendarRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.redirect === null ||
      requestParameters.redirect === undefined
    ) {
      throw new runtime.RequiredError(
        "redirect",
        "Required parameter requestParameters.redirect was null or undefined when calling connectGoogleCalendar.",
      )
    }

    if (requestParameters.url === null || requestParameters.url === undefined) {
      throw new runtime.RequiredError(
        "url",
        "Required parameter requestParameters.url was null or undefined when calling connectGoogleCalendar.",
      )
    }

    const queryParameters: any = {}

    if (requestParameters.redirect !== undefined) {
      queryParameters["redirect"] = requestParameters.redirect
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/workspaces/{url}/integrations/connect-google/`.replace(
          `{${"url"}}`,
          encodeURIComponent(String(requestParameters.url)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Initiate Google Calendar OAuth flow
   */
  async connectGoogleCalendar(
    requestParameters: ConnectGoogleCalendarRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.connectGoogleCalendarRaw(requestParameters, initOverrides)
  }

  /**
   * Initiate Microsoft Calendar OAuth flow
   */
  async connectMicrosoftCalendarRaw(
    requestParameters: ConnectMicrosoftCalendarRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.redirect === null ||
      requestParameters.redirect === undefined
    ) {
      throw new runtime.RequiredError(
        "redirect",
        "Required parameter requestParameters.redirect was null or undefined when calling connectMicrosoftCalendar.",
      )
    }

    if (requestParameters.url === null || requestParameters.url === undefined) {
      throw new runtime.RequiredError(
        "url",
        "Required parameter requestParameters.url was null or undefined when calling connectMicrosoftCalendar.",
      )
    }

    const queryParameters: any = {}

    if (requestParameters.redirect !== undefined) {
      queryParameters["redirect"] = requestParameters.redirect
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/workspaces/{url}/integrations/connect-microsoft/`.replace(
          `{${"url"}}`,
          encodeURIComponent(String(requestParameters.url)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Initiate Microsoft Calendar OAuth flow
   */
  async connectMicrosoftCalendar(
    requestParameters: ConnectMicrosoftCalendarRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.connectMicrosoftCalendarRaw(requestParameters, initOverrides)
  }

  /**
   * Initiate Zoom OAuth flow
   */
  async connectZoomRaw(
    requestParameters: ConnectZoomRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.redirect === null ||
      requestParameters.redirect === undefined
    ) {
      throw new runtime.RequiredError(
        "redirect",
        "Required parameter requestParameters.redirect was null or undefined when calling connectZoom.",
      )
    }

    if (requestParameters.url === null || requestParameters.url === undefined) {
      throw new runtime.RequiredError(
        "url",
        "Required parameter requestParameters.url was null or undefined when calling connectZoom.",
      )
    }

    const queryParameters: any = {}

    if (requestParameters.redirect !== undefined) {
      queryParameters["redirect"] = requestParameters.redirect
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/workspaces/{url}/integrations/connect-zoom/`.replace(
          `{${"url"}}`,
          encodeURIComponent(String(requestParameters.url)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Initiate Zoom OAuth flow
   */
  async connectZoom(
    requestParameters: ConnectZoomRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.connectZoomRaw(requestParameters, initOverrides)
  }

  /**
   * Handle Google Calendar OAuth callback
   */
  async handleGoogleCalendarOAuthCallbackRaw(
    requestParameters: HandleGoogleCalendarOAuthCallbackRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.url === null || requestParameters.url === undefined) {
      throw new runtime.RequiredError(
        "url",
        "Required parameter requestParameters.url was null or undefined when calling handleGoogleCalendarOAuthCallback.",
      )
    }

    const queryParameters: any = {}

    if (requestParameters.code !== undefined) {
      queryParameters["code"] = requestParameters.code
    }

    if (requestParameters.state !== undefined) {
      queryParameters["state"] = requestParameters.state
    }

    if (requestParameters.error !== undefined) {
      queryParameters["error"] = requestParameters.error
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/workspaces/{url}/integrations/connect-google/callback/`.replace(
          `{${"url"}}`,
          encodeURIComponent(String(requestParameters.url)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Handle Google Calendar OAuth callback
   */
  async handleGoogleCalendarOAuthCallback(
    requestParameters: HandleGoogleCalendarOAuthCallbackRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.handleGoogleCalendarOAuthCallbackRaw(
      requestParameters,
      initOverrides,
    )
  }

  /**
   * Handle Microsoft Calendar OAuth callback
   */
  async handleMicrosoftCalendarOAuthCallbackRaw(
    requestParameters: HandleMicrosoftCalendarOAuthCallbackRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.url === null || requestParameters.url === undefined) {
      throw new runtime.RequiredError(
        "url",
        "Required parameter requestParameters.url was null or undefined when calling handleMicrosoftCalendarOAuthCallback.",
      )
    }

    const queryParameters: any = {}

    if (requestParameters.code !== undefined) {
      queryParameters["code"] = requestParameters.code
    }

    if (requestParameters.state !== undefined) {
      queryParameters["state"] = requestParameters.state
    }

    if (requestParameters.error !== undefined) {
      queryParameters["error"] = requestParameters.error
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/workspaces/{url}/integrations/connect-microsoft/callback/`.replace(
          `{${"url"}}`,
          encodeURIComponent(String(requestParameters.url)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Handle Microsoft Calendar OAuth callback
   */
  async handleMicrosoftCalendarOAuthCallback(
    requestParameters: HandleMicrosoftCalendarOAuthCallbackRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.handleMicrosoftCalendarOAuthCallbackRaw(
      requestParameters,
      initOverrides,
    )
  }

  /**
   * Handle Zoom OAuth callback
   */
  async handleZoomOAuthCallbackRaw(
    requestParameters: HandleZoomOAuthCallbackRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.url === null || requestParameters.url === undefined) {
      throw new runtime.RequiredError(
        "url",
        "Required parameter requestParameters.url was null or undefined when calling handleZoomOAuthCallback.",
      )
    }

    const queryParameters: any = {}

    if (requestParameters.code !== undefined) {
      queryParameters["code"] = requestParameters.code
    }

    if (requestParameters.state !== undefined) {
      queryParameters["state"] = requestParameters.state
    }

    if (requestParameters.error !== undefined) {
      queryParameters["error"] = requestParameters.error
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/workspaces/{url}/integrations/connect-zoom/callback/`.replace(
          `{${"url"}}`,
          encodeURIComponent(String(requestParameters.url)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Handle Zoom OAuth callback
   */
  async handleZoomOAuthCallback(
    requestParameters: HandleZoomOAuthCallbackRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.handleZoomOAuthCallbackRaw(requestParameters, initOverrides)
  }
}
