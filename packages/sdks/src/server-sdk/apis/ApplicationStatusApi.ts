/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateApplicationStatusRequest,
  GetApplicationStatuses200ResponseInner,
  UpdateApplicationStatusRequest,
} from '../models';
import {
    CreateApplicationStatusRequestFromJSON,
    CreateApplicationStatusRequestToJSON,
    GetApplicationStatuses200ResponseInnerFromJSON,
    GetApplicationStatuses200ResponseInnerToJSON,
    UpdateApplicationStatusRequestFromJSON,
    UpdateApplicationStatusRequestToJSON,
} from '../models';

export interface CreateApplicationStatusOperationRequest {
    createApplicationStatusRequest: CreateApplicationStatusRequest;
}

export interface DeleteApplicationStatusRequest {
    id: string;
}

export interface UpdateApplicationStatusOperationRequest {
    id: string;
    updateApplicationStatusRequest?: UpdateApplicationStatusRequest;
}

/**
 * ApplicationStatusApi - interface
 * 
 * @export
 * @interface ApplicationStatusApiInterface
 */
export interface ApplicationStatusApiInterface {
    /**
     * Create a new application status for a workspace
     * @param {CreateApplicationStatusRequest} createApplicationStatusRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationStatusApiInterface
     */
    createApplicationStatusRaw(requestParameters: CreateApplicationStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetApplicationStatuses200ResponseInner>>;

    /**
     * Create a new application status for a workspace
     */
    createApplicationStatus(requestParameters: CreateApplicationStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetApplicationStatuses200ResponseInner>;

    /**
     * Delete an application status by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationStatusApiInterface
     */
    deleteApplicationStatusRaw(requestParameters: DeleteApplicationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete an application status by id
     */
    deleteApplicationStatus(requestParameters: DeleteApplicationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Get application statuses for the current workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationStatusApiInterface
     */
    getApplicationStatusesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetApplicationStatuses200ResponseInner>>>;

    /**
     * Get application statuses for the current workspace
     */
    getApplicationStatuses(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetApplicationStatuses200ResponseInner>>;

    /**
     * Update an application status by id
     * @param {string} id 
     * @param {UpdateApplicationStatusRequest} [updateApplicationStatusRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationStatusApiInterface
     */
    updateApplicationStatusRaw(requestParameters: UpdateApplicationStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetApplicationStatuses200ResponseInner>>;

    /**
     * Update an application status by id
     */
    updateApplicationStatus(requestParameters: UpdateApplicationStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetApplicationStatuses200ResponseInner>;

}

/**
 * 
 */
export class ApplicationStatusApi extends runtime.BaseAPI implements ApplicationStatusApiInterface {

    /**
     * Create a new application status for a workspace
     */
    async createApplicationStatusRaw(requestParameters: CreateApplicationStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetApplicationStatuses200ResponseInner>> {
        if (requestParameters.createApplicationStatusRequest === null || requestParameters.createApplicationStatusRequest === undefined) {
            throw new runtime.RequiredError('createApplicationStatusRequest','Required parameter requestParameters.createApplicationStatusRequest was null or undefined when calling createApplicationStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspace/application-statuses/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateApplicationStatusRequestToJSON(requestParameters.createApplicationStatusRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetApplicationStatuses200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Create a new application status for a workspace
     */
    async createApplicationStatus(requestParameters: CreateApplicationStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetApplicationStatuses200ResponseInner> {
        const response = await this.createApplicationStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an application status by id
     */
    async deleteApplicationStatusRaw(requestParameters: DeleteApplicationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteApplicationStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/application-statuses/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an application status by id
     */
    async deleteApplicationStatus(requestParameters: DeleteApplicationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApplicationStatusRaw(requestParameters, initOverrides);
    }

    /**
     * Get application statuses for the current workspace
     */
    async getApplicationStatusesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetApplicationStatuses200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/application-statuses/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetApplicationStatuses200ResponseInnerFromJSON));
    }

    /**
     * Get application statuses for the current workspace
     */
    async getApplicationStatuses(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetApplicationStatuses200ResponseInner>> {
        const response = await this.getApplicationStatusesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update an application status by id
     */
    async updateApplicationStatusRaw(requestParameters: UpdateApplicationStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetApplicationStatuses200ResponseInner>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateApplicationStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspace/application-statuses/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApplicationStatusRequestToJSON(requestParameters.updateApplicationStatusRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetApplicationStatuses200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Update an application status by id
     */
    async updateApplicationStatus(requestParameters: UpdateApplicationStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetApplicationStatuses200ResponseInner> {
        const response = await this.updateApplicationStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
