/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateFormRequest,
  Def0,
  DeleteForm200Response,
  GetForms200ResponseInner,
  UpdateFormRequest,
} from '../models';
import {
    CreateFormRequestFromJSON,
    CreateFormRequestToJSON,
    Def0FromJSON,
    Def0ToJSON,
    DeleteForm200ResponseFromJSON,
    DeleteForm200ResponseToJSON,
    GetForms200ResponseInnerFromJSON,
    GetForms200ResponseInnerToJSON,
    UpdateFormRequestFromJSON,
    UpdateFormRequestToJSON,
} from '../models';

export interface CreateFormOperationRequest {
    createFormRequest: CreateFormRequest;
}

export interface DeleteFormRequest {
    id: string;
}

export interface GetFormRequest {
    id: string;
}

export interface GetFormsRequest {
    type?: GetFormsTypeEnum;
}

export interface UpdateFormOperationRequest {
    id: string;
    updateFormRequest?: UpdateFormRequest;
}

/**
 * FormApi - interface
 * 
 * @export
 * @interface FormApiInterface
 */
export interface FormApiInterface {
    /**
     * Creates a form in the current workspace
     * @param {CreateFormRequest} createFormRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormApiInterface
     */
    createFormRaw(requestParameters: CreateFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetForms200ResponseInner>>;

    /**
     * Creates a form in the current workspace
     */
    createForm(requestParameters: CreateFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetForms200ResponseInner>;

    /**
     * Deletes a form by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormApiInterface
     */
    deleteFormRaw(requestParameters: DeleteFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteForm200Response>>;

    /**
     * Deletes a form by ID
     */
    deleteForm(requestParameters: DeleteFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteForm200Response>;

    /**
     * Return a form by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormApiInterface
     */
    getFormRaw(requestParameters: GetFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetForms200ResponseInner>>;

    /**
     * Return a form by ID
     */
    getForm(requestParameters: GetFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetForms200ResponseInner>;

    /**
     * Returns the current workspace\'s forms by type
     * @param {'Application' | 'Review'} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormApiInterface
     */
    getFormsRaw(requestParameters: GetFormsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetForms200ResponseInner>>>;

    /**
     * Returns the current workspace\'s forms by type
     */
    getForms(requestParameters: GetFormsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetForms200ResponseInner>>;

    /**
     * Updates a form in the current workspace
     * @param {string} id 
     * @param {UpdateFormRequest} [updateFormRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormApiInterface
     */
    updateFormRaw(requestParameters: UpdateFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetForms200ResponseInner>>;

    /**
     * Updates a form in the current workspace
     */
    updateForm(requestParameters: UpdateFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetForms200ResponseInner>;

}

/**
 * 
 */
export class FormApi extends runtime.BaseAPI implements FormApiInterface {

    /**
     * Creates a form in the current workspace
     */
    async createFormRaw(requestParameters: CreateFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetForms200ResponseInner>> {
        if (requestParameters.createFormRequest === null || requestParameters.createFormRequest === undefined) {
            throw new runtime.RequiredError('createFormRequest','Required parameter requestParameters.createFormRequest was null or undefined when calling createForm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspace/forms/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFormRequestToJSON(requestParameters.createFormRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetForms200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Creates a form in the current workspace
     */
    async createForm(requestParameters: CreateFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetForms200ResponseInner> {
        const response = await this.createFormRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a form by ID
     */
    async deleteFormRaw(requestParameters: DeleteFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteForm200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteForm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/forms/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteForm200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a form by ID
     */
    async deleteForm(requestParameters: DeleteFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteForm200Response> {
        const response = await this.deleteFormRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a form by ID
     */
    async getFormRaw(requestParameters: GetFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetForms200ResponseInner>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getForm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/forms/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetForms200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Return a form by ID
     */
    async getForm(requestParameters: GetFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetForms200ResponseInner> {
        const response = await this.getFormRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the current workspace\'s forms by type
     */
    async getFormsRaw(requestParameters: GetFormsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetForms200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workspace/forms/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetForms200ResponseInnerFromJSON));
    }

    /**
     * Returns the current workspace\'s forms by type
     */
    async getForms(requestParameters: GetFormsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetForms200ResponseInner>> {
        const response = await this.getFormsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a form in the current workspace
     */
    async updateFormRaw(requestParameters: UpdateFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetForms200ResponseInner>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateForm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workspace/forms/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFormRequestToJSON(requestParameters.updateFormRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetForms200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Updates a form in the current workspace
     */
    async updateForm(requestParameters: UpdateFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetForms200ResponseInner> {
        const response = await this.updateFormRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum GetFormsTypeEnum {
    Application = 'Application',
    Review = 'Review'
}
