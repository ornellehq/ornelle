/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CreateFormRequestFieldsInner } from './CreateFormRequestFieldsInner';
import {
    CreateFormRequestFieldsInnerFromJSON,
    CreateFormRequestFieldsInnerFromJSONTyped,
    CreateFormRequestFieldsInnerToJSON,
} from './CreateFormRequestFieldsInner';

/**
 * 
 * @export
 * @interface CreateFormRequest
 */
export interface CreateFormRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateFormRequest
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof CreateFormRequest
     */
    description?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateFormRequest
     */
    openings?: Array<string>;
    /**
     * 
     * @type {Array<CreateFormRequestFieldsInner>}
     * @memberof CreateFormRequest
     */
    fields: Array<CreateFormRequestFieldsInner>;
    /**
     * 
     * @type {string}
     * @memberof CreateFormRequest
     */
    type: CreateFormRequestTypeEnum;
}

/**
* @export
* @enum {string}
*/
export enum CreateFormRequestTypeEnum {
    Application = 'Application',
    Review = 'Review'
}


/**
 * Check if a given object implements the CreateFormRequest interface.
 */
export function instanceOfCreateFormRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "fields" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function CreateFormRequestFromJSON(json: any): CreateFormRequest {
    return CreateFormRequestFromJSONTyped(json, false);
}

export function CreateFormRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateFormRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'title': json['title'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'openings': !exists(json, 'openings') ? undefined : json['openings'],
        'fields': ((json['fields'] as Array<any>).map(CreateFormRequestFieldsInnerFromJSON)),
        'type': json['type'],
    };
}

export function CreateFormRequestToJSON(value?: CreateFormRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'title': value.title,
        'description': value.description,
        'openings': value.openings,
        'fields': ((value.fields as Array<any>).map(CreateFormRequestFieldsInnerToJSON)),
        'type': value.type,
    };
}

