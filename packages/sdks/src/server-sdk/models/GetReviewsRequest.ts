/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GetReviewsRequestAnyOf } from './GetReviewsRequestAnyOf';
import {
    GetReviewsRequestAnyOfFromJSON,
    GetReviewsRequestAnyOfFromJSONTyped,
    GetReviewsRequestAnyOfToJSON,
} from './GetReviewsRequestAnyOf';
import type { GetReviewsRequestAnyOf1 } from './GetReviewsRequestAnyOf1';
import {
    GetReviewsRequestAnyOf1FromJSON,
    GetReviewsRequestAnyOf1FromJSONTyped,
    GetReviewsRequestAnyOf1ToJSON,
} from './GetReviewsRequestAnyOf1';

/**
 * 
 * @export
 * @interface GetReviewsRequest
 */
export interface GetReviewsRequest {
    /**
     * 
     * @type {string}
     * @memberof GetReviewsRequest
     */
    authorId?: string;
    /**
     * 
     * @type {string}
     * @memberof GetReviewsRequest
     */
    status?: GetReviewsRequestStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof GetReviewsRequest
     */
    source?: GetReviewsRequestSourceEnum;
    /**
     * 
     * @type {string}
     * @memberof GetReviewsRequest
     */
    sourceId?: string;
    /**
     * 
     * @type {any}
     * @memberof GetReviewsRequest
     */
    where?: any | null;
}

/**
* @export
* @enum {string}
*/
export enum GetReviewsRequestStatusEnum {
    Pending = 'Pending',
    Approved = 'Approved',
    Rejected = 'Rejected'
}
/**
* @export
* @enum {string}
*/
export enum GetReviewsRequestSourceEnum {
    Profile = 'Profile',
    Candidate = 'Candidate'
}


/**
 * Check if a given object implements the GetReviewsRequest interface.
 */
export function instanceOfGetReviewsRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function GetReviewsRequestFromJSON(json: any): GetReviewsRequest {
    return GetReviewsRequestFromJSONTyped(json, false);
}

export function GetReviewsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetReviewsRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'authorId': !exists(json, 'authorId') ? undefined : json['authorId'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'source': !exists(json, 'source') ? undefined : json['source'],
        'sourceId': !exists(json, 'sourceId') ? undefined : json['sourceId'],
        'where': !exists(json, 'where') ? undefined : json['where'],
    };
}

export function GetReviewsRequestToJSON(value?: GetReviewsRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'authorId': value.authorId,
        'status': value.status,
        'source': value.source,
        'sourceId': value.sourceId,
        'where': value.where,
    };
}

