/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.15.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime"
/**
 *
 * @export
 * @interface WorkspaceIntegrationsSettingsSettingsPatchRequest
 */
export interface WorkspaceIntegrationsSettingsSettingsPatchRequest {
  /**
   *
   * @type {string}
   * @memberof WorkspaceIntegrationsSettingsSettingsPatchRequest
   */
  defaultProvider: WorkspaceIntegrationsSettingsSettingsPatchRequestDefaultProviderEnum
}

/**
 * @export
 * @enum {string}
 */
export enum WorkspaceIntegrationsSettingsSettingsPatchRequestDefaultProviderEnum {
  Google = "google",
  Zoom = "zoom",
  None = "none",
}

/**
 * Check if a given object implements the WorkspaceIntegrationsSettingsSettingsPatchRequest interface.
 */
export function instanceOfWorkspaceIntegrationsSettingsSettingsPatchRequest(
  value: object,
): boolean {
  let isInstance = true
  isInstance = isInstance && "defaultProvider" in value

  return isInstance
}

export function WorkspaceIntegrationsSettingsSettingsPatchRequestFromJSON(
  json: any,
): WorkspaceIntegrationsSettingsSettingsPatchRequest {
  return WorkspaceIntegrationsSettingsSettingsPatchRequestFromJSONTyped(
    json,
    false,
  )
}

export function WorkspaceIntegrationsSettingsSettingsPatchRequestFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): WorkspaceIntegrationsSettingsSettingsPatchRequest {
  if (json === undefined || json === null) {
    return json
  }
  return {
    defaultProvider: json["defaultProvider"],
  }
}

export function WorkspaceIntegrationsSettingsSettingsPatchRequestToJSON(
  value?: WorkspaceIntegrationsSettingsSettingsPatchRequest | null,
): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    defaultProvider: value.defaultProvider,
  }
}
